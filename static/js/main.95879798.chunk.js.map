{"version":3,"sources":["nes/helpers/Byte.js","nes/helpers/WithContext.js","nes/registers/Register.js","nes/registers/index.js","nes/cpu/FlagsRegister.js","nes/memory/WithLittleEndian.js","nes/memory/WithMemory.js","nes/memory/WithComposedMemory.js","nes/memory/MemoryChunk.js","nes/memory/MemoryMirror.js","nes/memory/MemoryPadding.js","nes/cpu/CPUMemoryMap.js","nes/cpu/Stack.js","nes/cpu/instructions/arithmetic.js","nes/cpu/instructions/branching.js","nes/cpu/instructions/checks.js","nes/cpu/instructions/data.js","nes/cpu/instructions/logical.js","nes/cpu/constants/interrupts.js","nes/cpu/instructions/misc.js","nes/cpu/instructions/index.js","nes/cpu/addressings/implicit.js","nes/cpu/addressings/immediate.js","nes/cpu/addressings/_getValue.js","nes/cpu/addressings/absolute.js","nes/cpu/addressings/_indexedGetAddress.js","nes/cpu/addressings/indexedAbsoluteX.js","nes/cpu/addressings/indexedAbsoluteY.js","nes/cpu/addressings/zeroPage.js","nes/cpu/addressings/indexedZeroPageX.js","nes/cpu/addressings/indexedZeroPageY.js","nes/cpu/addressings/indirect.js","nes/cpu/addressings/indexedIndirectX.js","nes/cpu/addressings/indexedIndirectY.js","nes/cpu/addressings/relative.js","nes/cpu/addressings/accumulator.js","nes/cpu/addressings/index.js","nes/cpu/operations/arithmetic.js","nes/cpu/operations/branching.js","nes/cpu/operations/checks.js","nes/cpu/operations/data.js","nes/cpu/operations/logical.js","nes/cpu/operations/misc.js","nes/cpu/operations/index.js","nes/cpu/index.js","nes/cpu/CPU.js","nes/cartridge/mappers/NROM.js","nes/cartridge/mappers/Mapper.js","nes/cartridge/mappers/index.js","nes/cartridge/Cartridge.js","nes/cartridge/index.js","nes/NES.js","nes/NESTestLogger.js","gui/App.js","gui/index.js","index.js"],"names":["Byte","toNumber","byte","SIZE","toSignedByte","number","hasOverflow","value","isPositive","this","isNegative","getBit","negate","force8Bit","force16Bit","position","getSubNumber","startPosition","size","setSubNumber","newByte","i","highPartOf","twoBytesNumber","lowPartOf","to16Bit","mostSignificativeByte","leastSignificativeByte","WithContext","apply","obj","_","defaults","omit","context","loadContext","onLoad","unloadContext","requireContext","onUnload","Error","Register","TypedArray","initialValue","arguments","length","undefined","Object","classCallCheck","bytes","Register8Bit","_Register","possibleConstructorReturn","getPrototypeOf","call","Uint8Array","inherits","Register16Bit","_Register2","Uint16Array","FlagsRegister","n","v","d","z","c","load","updateZero","updateNegative","WithLittleEndian","readBytesAt","address","read2BytesAt","readAt","write2BytesAt","low","high","writeAt","WithMemory","getBytes","readUInt8","e","_throwInvalidAddressError","writeUInt8","concat","toString","WithComposedMemory","chunks","defineChunks","startAddress","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","chunk","$memoryStartAddress","memorySize","err","return","_getChunkFor","offset","_toRelativeAddress","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","MemoryChunk","isFinite","Buffer","alloc","MemoryMirror","startAt","mirroredSize","_checkAddress","MemoryPadding","CPUMemoryMap","mapper","_ref","ram","ramMirror","ppuRegisters","ppuRegistersMirror","apuAndIoRegisters","cpuTestModeRegisters","Stack","memory","currentAddress","cpu","sp","decrement","increment","push","pop","ADC","_ref7","oldValue","registers","a","result","flags","newValue","updateZeroAndNegative","DE_","registerName","_ref8","register","IN_","_ref9","instructions","id","needsValue","execute","_ref2","_ref3","_ref4","_ref5","_ref6","B__","flag","pc","extraCycles","stack","push2Bytes","pop2Bytes","CP_","source","SE_","flagName","CL_","LD_","ST_","T__","getSourceRegister","getTargetRegister","updateFlags","pushFlags","x","y","LOGICAL_INSTRUCTION","operator","one","another","keyBy","vector","interrupt","interrupts","IRQ","toConsumableArray","arithmetic","branching","checks","data","logical","misc","implicit","parameterSize","getAddress","getValue","immediate","_getValue","parameter","canTakeExtraCycles","absolute","_indexedGetAddress","newAddress","indexedAbsoluteX","indexedGetAddress","indexedAbsoluteY","zeroPage","indexedGetAddressX","indexedZeroPageX","indexedGetAddressY","indexedZeroPageY","indirect","msb","lsb","getIndirectAddress","transform","it","start","end","indexedIndirectX","indexedIndirectY","relative","accumulator","operations_arithmetic","instruction","cycles","addressing","addressings","IMMEDIATE","ZERO_PAGE","INDEXED_ZERO_PAGE_X","ABSOLUTE","INDEXED_ABSOLUTE_X","INDEXED_ABSOLUTE_Y","INDEXED_INDIRECT_X","INDEXED_INDIRECT_Y","ASL","ACCUMULATOR","DEC","DEX","IMPLICIT","DEY","INC","INX","INY","LSR","ROL","ROR","SBC","operations_branching","BCC","RELATIVE","BCS","BEQ","BMI","BNE","BPL","BVC","BVS","JMP","INDIRECT","JSR","RTI","RTS","operations_checks","BIT","CMP","CPX","CPY","operations_data","CLC","CLD","CLI","CLV","LDA","LDX","INDEXED_ZERO_PAGE_Y","LDY","PHA","PHP","PLA","PLP","SEC","SED","SEI","STA","STX","STY","TAX","TAY","TSX","TXA","TXS","TYA","operations_logical","AND","EOR","ORA","operations_misc","BRK","NOP","CPU","cycle","_parameter","_reset","operation","_readOperation","_readParameter","logger","log","initialParameter","finalParameter","withB2Flag","_areInterruptsEnabled","_jumpToInterruptHandler","toByte","reset","RESET","opcode","operations","PRG_ROM_PAGE_SIZE","NROM","cartridge","_this","assertThisInitialized","unused","prgRomFirstPage","prgRom","slice","prgRomLastPage","header","prgRomPages","MAGIC_NUMBER","Cartridge","magicNumber","mappers","mapperId","_getBytes","_programOffset","_programSize","chrRomPages","__header","flags6","flags7","hasTrainerBeforeProgram","Array","from","map","char","String","fromCharCode","join","NES","rom","createMapper","step","hex","padStart","toUpperCase","NESTestLogger","request","section","string","padEnd","substr","hexParameter","$counter","$operation","$parameters","$commandHex","$assembly","$initialParameter","$finalParameter","finalAddress","$address","includes","formatParameter","$registers","$ppuCycle","$cpuCycle","$status","window","lastLog","console","App","state","expected","actual","onStep","event","code","diffs","getDiff","setState","document","addEventListener","removeEventListener","react_default","createElement","className","onKeyDown","lib_default","splitView","Component","ReactDOM","render","App_App","getElementById","asyncToGenerator","regenerator_default","mark","_callee","response","arrayBuffer","logResponse","logText","logLines","withoutPpu","line","wrap","_context","prev","fetch","sent","nes","text","split","replace","diff","stop","DEMO"],"mappings":"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","file":"static/js/main.95879798.chunk.js","sourcesContent":["const SIZE = 256;\nconst LIMIT = SIZE / 2 - 1;\n\n/*\n * A byte helper. Signed bytes use the \"Two's complement\" representation.\n *\n * Positive values are: {value}             => [0  , 127]\n * Negative values are: -(SIZE - {value})   => [128, 255]\n */\nexport default {\n\t/** Converts a signed `byte` to a number. */\n\ttoNumber(byte) {\n\t\treturn byte <= LIMIT ? byte : -(SIZE - byte);\n\t},\n\n\t/** Converts a `number` to a signed byte. */\n\ttoSignedByte(number) {\n\t\treturn number < 0 ? number + SIZE : number;\n\t},\n\n\t/** Returns if `value` can be represented as a single byte. */\n\thasOverflow(value) {\n\t\treturn value >= SIZE;\n\t},\n\n\t/** Returns if `value` is positive. */\n\tisPositive(byte) {\n\t\treturn !this.isNegative(byte);\n\t},\n\n\t/** Returns if `value` is negative. */\n\tisNegative(byte) {\n\t\treturn !!this.getBit(byte, 7);\n\t},\n\n\t/** Converts a signed `byte` to negative. */\n\tnegate(byte) {\n\t\treturn SIZE - byte;\n\t},\n\n\t/** Forces a `value` to fit in 8 bits (256 => 0). */\n\tforce8Bit(value) {\n\t\treturn value & 0xff;\n\t},\n\n\t/** Forces a `value` to fit in 16 bits (65536 => 0). */\n\tforce16Bit(value) {\n\t\treturn value & 0xffff;\n\t},\n\n\t/** Returns the bit located at `position` in `number`. */\n\tgetBit(number, position) {\n\t\treturn (number >> position) & 1;\n\t},\n\n\t/** Returns a sub-number of `size` bits inside a `byte`, starting at `startPosition`. */\n\tgetSubNumber(byte, startPosition, size) {\n\t\treturn (byte >> startPosition) & (0xff >> (8 - size));\n\t},\n\n\t/** Inserts a `value` of `size` bits inside a `byte`, starting at `startPosition`. */\n\tsetSubNumber(byte, startPosition, size, value) {\n\t\tlet newByte = byte;\n\t\tfor (let i = startPosition; i < startPosition + size; i++) {\n\t\t\tnewByte &= this.negate(1 << i) - 1;\n\t\t}\n\t\treturn newByte | (value << startPosition);\n\t},\n\n\t/** Returns the most significative byte of a `twoBytesNumber`. */\n\thighPartOf(twoBytesNumber) {\n\t\treturn twoBytesNumber >> 8;\n\t},\n\n\t/** Returns the least significative byte of a `twoBytesNumber`. */\n\tlowPartOf(twoBytesNumber) {\n\t\treturn twoBytesNumber & 0x00ff;\n\t},\n\n\t/** Returns a two bytes value from the `mostSignificativeByte` and `leastSignificativeByte`. */\n\tto16Bit(mostSignificativeByte, leastSignificativeByte) {\n\t\treturn (\n\t\t\t(this.force8Bit(mostSignificativeByte) << 8) |\n\t\t\tthis.force8Bit(leastSignificativeByte)\n\t\t);\n\t}\n};\n","import _ from \"lodash\";\n\n/** A mixin for anything that has a context. */\nexport default {\n\t/** Applies the mixin. */\n\tapply(obj) {\n\t\t_.defaults(obj, _.omit(this, \"apply\"));\n\t},\n\n\t/** The current execution context. */\n\tcontext: null,\n\n\t/** Loads an execution context. */\n\tloadContext(context) {\n\t\tthis.context = context;\n\t\tif (this.onLoad) this.onLoad(context);\n\t\treturn this;\n\t},\n\n\t/** Unloads the current execution context. */\n\tunloadContext() {\n\t\tthis.requireContext();\n\n\t\tthis.context = null;\n\t\tif (this.onUnload) this.onUnload();\n\t\treturn this;\n\t},\n\n\t/** Asserts that a current context exists.. */\n\trequireContext() {\n\t\tif (!this.context) throw new Error(\"Execution context not found.\");\n\t}\n};\n","/** A CPU register that can handle overflows and underflows. */\nexport default class Register {\n\tconstructor(TypedArray, initialValue = 0) {\n\t\tthis.bytes = new TypedArray(1);\n\t\tthis.value = this.initialValue = initialValue;\n\t}\n\n\t/** Resets the `value` to the `initialValue`. */\n\treset() {\n\t\tthis.value = this.initialValue;\n\t}\n\n\t/** Increments the value. */\n\tincrement() {\n\t\tthis.value++;\n\t}\n\n\t/** Decrements the value. */\n\tdecrement() {\n\t\tthis.value--;\n\t}\n\n\t/** Returns the actual value. */\n\tget value() {\n\t\treturn this.bytes[0];\n\t}\n\n\t/** Sets the actual value. */\n\tset value(value) {\n\t\tthis.bytes[0] = value;\n\t}\n\n\ttoString() {\n\t\treturn \"[REGISTER]\";\n\t}\n}\n","import Register from \"./Register\";\nimport InMemoryRegister from \"./InMemoryRegister\";\n\n/** An 8-bit register. */\nexport class Register8Bit extends Register {\n\tconstructor(initialValue) {\n\t\tsuper(Uint8Array, initialValue);\n\t}\n}\n\n/** A 16-bit register. */\nexport class Register16Bit extends Register {\n\tconstructor(initialValue) {\n\t\tsuper(Uint16Array, initialValue);\n\t}\n}\n\nexport { InMemoryRegister };\n","import { Byte } from \"../helpers\";\n\nconst N_BIT /*  */ = 0b10000000;\nconst V_BIT /*  */ = 0b01000000;\nconst B1_BIT /* */ = 0b00100000;\nconst D_BIT /*  */ = 0b00001000;\nconst I_BIT /*  */ = 0b00000100;\nconst Z_BIT /*  */ = 0b00000010;\nconst C_BIT /*  */ = 0b00000001;\n\n/** The processor status flags. **/\nexport default class FlagsRegister {\n\tconstructor(initialValue = 0) {\n\t\tthis.n = false; // negative\n\t\tthis.v = false; // overflow\n\t\tthis.d = false; // decimal mode\n\t\tthis.i = false; // interrupt disable\n\t\tthis.z = false; // zero\n\t\tthis.c = false; // carry\n\n\t\t// (bits 4 and 5 -also called \"B1\" and \"B2\"- are not actual flags)\n\t\t// (they only appear when the flags are pushed to the stack)\n\n\t\tthis.load(initialValue);\n\t}\n\n\t/** Deserializes a `byte` into the status flags. **/\n\tload(byte) {\n\t\tthis.n = !!(byte & N_BIT);\n\t\tthis.v = !!(byte & V_BIT);\n\t\tthis.d = !!(byte & D_BIT);\n\t\tthis.i = !!(byte & I_BIT);\n\t\tthis.z = !!(byte & Z_BIT);\n\t\tthis.c = !!(byte & C_BIT);\n\n\t\treturn this;\n\t}\n\n\t/** Serializes the status flags into a byte. **/\n\ttoByte() {\n\t\treturn (\n\t\t\t(this.n && N_BIT) |\n\t\t\t(this.v && V_BIT) |\n\t\t\tB1_BIT |\n\t\t\t(this.d && D_BIT) |\n\t\t\t(this.i && I_BIT) |\n\t\t\t(this.z && Z_BIT) |\n\t\t\t(this.c && C_BIT)\n\t\t);\n\t}\n\n\t/** Updates the Z and N flags depending on a `byte`. */\n\tupdateZeroAndNegative(byte) {\n\t\tthis.updateZero(byte);\n\t\tthis.updateNegative(byte);\n\t}\n\n\t/** Updates the Z flag depending on a `byte`. */\n\tupdateZero(byte) {\n\t\tthis.z = byte === 0;\n\t}\n\n\t/** Updates the N flag depending on a `byte`. */\n\tupdateNegative(byte) {\n\t\tthis.n = Byte.isNegative(byte);\n\t}\n}\n","import { Byte } from \"../helpers\";\nimport _ from \"lodash\";\n\n/** A mixin for reading bytes in Little Endian. */\nexport default {\n\t/** Applies the mixin. */\n\tapply(obj) {\n\t\t_.defaults(obj, _.omit(this, \"apply\"));\n\t},\n\n\t/** Reads `length` (1 or 2) bytes in LE from `address`. */\n\treadBytesAt(address, length) {\n\t\tif (length === 0) return null;\n\n\t\treturn length === 2 ? this.read2BytesAt(address) : this.readAt(address);\n\t},\n\n\t/** Writes two bytes in LE to `address`. */\n\twrite2BytesAt(address, value) {\n\t\tconst low = Byte.lowPartOf(value);\n\t\tconst high = Byte.highPartOf(value);\n\n\t\tthis.writeAt(address, low);\n\t\tthis.writeAt(address + 1, high);\n\t},\n\n\t/** Reads two bytes in LE from `address`. */\n\tread2BytesAt(address) {\n\t\tconst low = this.readAt(address);\n\t\tconst high = this.readAt(address + 1);\n\n\t\treturn Byte.to16Bit(high, low);\n\t}\n};\n","import WithLittleEndian from \"./WithLittleEndian\";\nimport _ from \"lodash\";\n\n/** A mixin for memory handling. */\nexport default {\n\t/** Applies the mixin. */\n\tapply(obj) {\n\t\t_.defaults(obj, _.omit(this, \"apply\"));\n\t\tWithLittleEndian.apply(obj);\n\t},\n\n\t/** Returns the memory bytes. */\n\tgetBytes() {\n\t\tthrow new Error(\"not_implemented\");\n\t},\n\n\t/** Reads a byte from `address`. */\n\treadAt(address) {\n\t\ttry {\n\t\t\treturn this.getBytes().readUInt8(address);\n\t\t} catch (e) {\n\t\t\tthis._throwInvalidAddressError(address);\n\t\t}\n\t},\n\n\t/** Writes a `byte` to `address`. */\n\twriteAt(address, byte) {\n\t\ttry {\n\t\t\tthis.getBytes().writeUInt8(byte, address);\n\t\t} catch (e) {\n\t\t\tthis._throwInvalidAddressError(address);\n\t\t}\n\t},\n\n\t_throwInvalidAddressError(address) {\n\t\tthrow new Error(`Invalid memory access at 0x${address.toString(16)}`);\n\t}\n};\n","import WithLittleEndian from \"./WithLittleEndian\";\nimport _ from \"lodash\";\n\n/** A mixin for composed memory handling, with multiple `chunks`. */\nexport default {\n\t/** Applies the mixin. */\n\tapply(obj) {\n\t\t_.defaults(obj, _.omit(this, \"apply\"));\n\t\tWithLittleEndian.apply(obj);\n\t\tobj.chunks = null;\n\t},\n\n\t/** Defines the `chunks` of the memory map. */\n\tdefineChunks(chunks) {\n\t\tthis.chunks = chunks;\n\n\t\tlet startAddress = 0;\n\t\tfor (let chunk of this.chunks) {\n\t\t\tchunk.$memoryStartAddress = startAddress;\n\t\t\tstartAddress += chunk.memorySize;\n\t\t}\n\n\t\tthis.memorySize = startAddress;\n\t},\n\n\t/** Reads a byte from `address`, using the correct `chunk`. */\n\treadAt(address) {\n\t\tconst chunk = this._getChunkFor(address);\n\t\tconst offset = this._toRelativeAddress(address, chunk);\n\t\treturn chunk.readAt(offset);\n\t},\n\n\t/** Writes a `byte` to `address`, using the correct `chunk`. */\n\twriteAt(address, byte) {\n\t\tconst chunk = this._getChunkFor(address);\n\t\tconst offset = this._toRelativeAddress(address, chunk);\n\t\treturn chunk.writeAt(offset, byte);\n\t},\n\n\t_getChunkFor(address) {\n\t\tif (!this.chunks) throw new Error(\"Undefined chunks.\");\n\n\t\tfor (let chunk of this.chunks) {\n\t\t\tconst startAddress = chunk.$memoryStartAddress;\n\n\t\t\tif (address >= startAddress && address < startAddress + chunk.memorySize)\n\t\t\t\treturn chunk;\n\t\t}\n\n\t\tthrow new Error(`Unreachable address: 0x${address.toString(16)}.`);\n\t},\n\n\t_toRelativeAddress(address, chunk) {\n\t\treturn address - chunk.$memoryStartAddress;\n\t}\n};\n","import WithMemory from \"./WithMemory\";\nimport { Buffer } from \"buffer\";\nimport _ from \"lodash\";\n\n/**\n * A memory chunk that can store `bytes`.\n * It's located at the `startAddress` of another memory structure.\n */\nexport default class MemoryChunk {\n\tconstructor(bytes) {\n\t\tif (_.isFinite(bytes)) bytes = Buffer.alloc(bytes);\n\t\tWithMemory.apply(this);\n\n\t\tthis.bytes = bytes;\n\t\tthis.memorySize = bytes.length;\n\t}\n\n\t/** Returns the memory bytes. */\n\tgetBytes() {\n\t\treturn this.bytes;\n\t}\n}\n","import WithLittleEndian from \"./WithLittleEndian\";\n\n/** A memory chunk that mirrors another `chunk`. */\nexport default class MemoryMirror {\n\tconstructor(\n\t\tchunk,\n\t\tsize,\n\t\tstartAt = 0,\n\t\tmirroredSize = chunk.memorySize - startAt\n\t) {\n\t\tWithLittleEndian.apply(this);\n\n\t\tthis.chunk = chunk;\n\t\tthis.startAt = startAt;\n\t\tthis.mirroredSize = mirroredSize;\n\t\tthis.memorySize = size;\n\t}\n\n\t/** Reads a byte from `address`, mirroring bytes. */\n\treadAt(address) {\n\t\tthis._checkAddress(address);\n\t\treturn this.chunk.readAt(this.startAt + (address % this.mirroredSize));\n\t}\n\n\t/** Writes a `byte` to `address`, mirroring bytes. */\n\twriteAt(address, byte) {\n\t\tthis._checkAddress(address);\n\t\tthis.chunk.writeAt(this.startAt + (address % this.mirroredSize), byte);\n\t}\n\n\t_checkAddress(address) {\n\t\tif (address >= this.memorySize)\n\t\t\tthrow new Error(`Unreachable address: 0x${address.toString(16)}.`);\n\t}\n}\n","/**\n * A memory chunk that doesn't use space.\n * It's usually mapped / rewired to another thing.\n */\nexport default class MemoryPadding {\n\tconstructor(size) {\n\t\tthis.memorySize = size;\n\t}\n\n\t/** Reads nothing. */\n\treadAt(address) {\n\t\treturn 0;\n\t}\n\n\t/** Writes nothing. */\n\twriteAt(address, byte) {}\n}\n","import {\n\tWithComposedMemory,\n\tMemoryChunk,\n\tMemoryMirror,\n\tMemoryPadding\n} from \"../memory\";\nimport { WithContext } from \"../helpers\";\n\n/** The CPU memory map. Addess space size: 64KB. */\nexport default class CPUMemoryMap {\n\tconstructor() {\n\t\tWithContext.apply(this);\n\t\tWithComposedMemory.apply(this);\n\t}\n\n\t/** When a context is loaded. */\n\tonLoad({ mapper }) {\n\t\tconst ram = new MemoryChunk(0x0800);\n\t\tconst ramMirror = new MemoryMirror(ram, 0x1800);\n\t\tconst ppuRegisters = new MemoryPadding(0x0008);\n\t\tconst ppuRegistersMirror = new MemoryPadding(0x1ff8);\n\t\tconst apuAndIoRegisters = new MemoryPadding(0x0018);\n\t\tconst cpuTestModeRegisters = new MemoryPadding(0x0008);\n\n\t\tthis.defineChunks([\n\t\t\t//                       Address range  Size     Device\n\t\t\tram, //                  $0000-$07FF    $0800    2KB internal RAM\n\t\t\tramMirror, //            $0800-$1FFF    $1800    Mirrors of $0000-$07FF\n\t\t\tppuRegisters, //         $2000-$2007    $0008    NES PPU registers\n\t\t\tppuRegistersMirror, //   $2008-$3FFF    $1FF8\t   Mirrors of $2000-2007 (repeats every 8 bytes)\n\t\t\tapuAndIoRegisters, //    $4000-$4017    $0018\t   NES APU and I/O registers\n\t\t\tcpuTestModeRegisters, // $4018-$401F    $0008\t   APU and I/O functionality that is normally disabled\n\t\t\tmapper //                $4020-$FFFF    $BFE0\t   Cartridge space: PRG ROM, PRG RAM, and mapper registers\n\t\t]);\n\t}\n\n\t/** Reads a `byte` from `address`, which can be a register or a memory address. */\n\treadAt(address) {\n\t\treturn address.value\n\t\t\t? address.value\n\t\t\t: WithComposedMemory.readAt.call(this, address);\n\t}\n\n\t/** Writes a `byte` to `address`, which can be a register or a memory address. */\n\twriteAt(address, byte) {\n\t\tif (address.value) address.value = byte;\n\t\telse WithComposedMemory.writeAt.call(this, address, byte);\n\t}\n\n\t/** When the current context is unloaded. */\n\tonUnload() {\n\t\tthis.defineChunks(null);\n\t}\n}\n","import { WithContext, Byte } from \"../helpers\";\n\nconst START_ADDRESS = 0x0100;\n\n/** An in-memory stack, controlled by the CPU. */\nexport default class Stack {\n\tconstructor() {\n\t\tWithContext.apply(this);\n\t}\n\n\t/** Pushes a `value` into the stack. */\n\tpush(value) {\n\t\tthis.requireContext();\n\n\t\tthis.context.memory.writeAt(this.currentAddress, value);\n\t\tthis.context.cpu.sp.decrement();\n\t}\n\n\t/** Pulls a value from the stack. */\n\tpop() {\n\t\tthis.requireContext();\n\n\t\tthis.context.cpu.sp.increment();\n\t\treturn this.context.memory.readAt(this.currentAddress);\n\t}\n\n\t/** Pushes a 16-bit `value` into the stack. */\n\tpush2Bytes(value) {\n\t\tconst low = Byte.lowPartOf(value);\n\t\tconst high = Byte.highPartOf(value);\n\t\tthis.push(high);\n\t\tthis.push(low);\n\t}\n\n\t/** Pulls a 16-bit `value` from the stack. */\n\tpop2Bytes(value) {\n\t\tconst low = this.pop();\n\t\tconst high = this.pop();\n\n\t\treturn Byte.to16Bit(high, low);\n\t}\n\n\t/** Returns the start address of the stack. */\n\tget startAddress() {\n\t\treturn START_ADDRESS;\n\t}\n\n\t/** Returns the current address of the stack. */\n\tget currentAddress() {\n\t\treturn this.startAddress + this.context.cpu.sp.value;\n\t}\n}\n","import { Byte } from \"../../helpers\";\n\nconst instructions = () => [\n\t/**\n\t * Add with Carry\n\t *\n\t * Adds the contents of `value` to A together with the carry bit, updating the Z and N flags.\n\t * The C and V flags are set in case of unsigned and signed overflow respectively.\n\t * Signed overflow occurs when `Positive + Positive = Negative` or `Negative + Negative = Positive`.\n\t */\n\t{\n\t\tid: \"ADC\",\n\t\tneedsValue: true,\n\t\texecute: ADC\n\t},\n\n\t/**\n\t * Arithmetic Shift Left\n\t *\n\t * Shifts all the bits of the value held at `address` one bit to the left.\n\t * Bit 7 is placed in the C flag and bit 0 is set to 0.\n\t * The Z and N flags are updated too.\n\t */\n\t{\n\t\tid: \"ASL\",\n\t\texecute: ({ cpu, memory }, address) => {\n\t\t\tconst value = memory.readAt(address);\n\t\t\tconst result = value << 1;\n\t\t\tconst newValue = Byte.force8Bit(result);\n\n\t\t\tmemory.writeAt(address, newValue);\n\t\t\tcpu.flags.updateZeroAndNegative(newValue);\n\t\t\tcpu.flags.c = Byte.hasOverflow(result);\n\t\t}\n\t},\n\n\t/**\n\t * Decrement Memory\n\t *\n\t * Substracts one from the value held at `address`, updating the Z and N flags.\n\t */\n\t{\n\t\tid: \"DEC\",\n\t\texecute: ({ cpu, memory }, address) => {\n\t\t\tconst value = memory.readAt(address);\n\t\t\tconst newValue = Byte.force8Bit(value - 1);\n\n\t\t\tcpu.flags.updateZeroAndNegative(newValue);\n\t\t\tmemory.writeAt(address, newValue);\n\t\t}\n\t},\n\n\t/**\n\t * Decrement X Register\n\t *\n\t * Substracts one from X, updating the Z and N flags.\n\t */\n\t{\n\t\tid: \"DEX\",\n\t\texecute: DE_(\"x\")\n\t},\n\n\t/**\n\t * Decrement Y Register\n\t *\n\t * Substracts one from Y, updating the Z and N flags.\n\t */\n\t{\n\t\tid: \"DEY\",\n\t\texecute: DE_(\"y\")\n\t},\n\n\t/**\n\t * Increment Memory\n\t *\n\t * Adds one to the value held at `address`, updating the Z and N flags.\n\t */\n\t{\n\t\tid: \"INC\",\n\t\texecute: ({ cpu, memory }, address) => {\n\t\t\tconst value = memory.readAt(address);\n\t\t\tconst newValue = Byte.force8Bit(value + 1);\n\n\t\t\tcpu.flags.updateZeroAndNegative(newValue);\n\t\t\tmemory.writeAt(address, newValue);\n\t\t}\n\t},\n\n\t/**\n\t * Increment X Register\n\t *\n\t * Adds one to X, updating the Z and N flags.\n\t */\n\t{\n\t\tid: \"INX\",\n\t\texecute: IN_(\"x\")\n\t},\n\n\t/**\n\t * Increment Y Register\n\t *\n\t * Adds one to Y, updating the Z and N flags.\n\t */\n\t{\n\t\tid: \"INY\",\n\t\texecute: IN_(\"y\")\n\t},\n\n\t/**\n\t * Logical Shift Right\n\t *\n\t * Shifts all the bits of the value held at `address` one bit to the right.\n\t * Bit 0 is placed in the C flag and bit 7 is set to 0.\n\t * The Z and N flags are updated too.\n\t */\n\t{\n\t\tid: \"LSR\",\n\t\texecute: ({ cpu, memory }, address) => {\n\t\t\tconst value = memory.readAt(address);\n\t\t\tconst result = value >> 1;\n\t\t\tconst newValue = Byte.force8Bit(result);\n\n\t\t\tmemory.writeAt(address, newValue);\n\t\t\tcpu.flags.updateZeroAndNegative(newValue);\n\t\t\tcpu.flags.c = !!Byte.getBit(value, 0);\n\t\t}\n\t},\n\n\t/**\n\t * Rotate Left\n\t *\n\t * Moves all the bits of the value held at `address` one place to the left.\n\t * Bit 7 is placed in the C flag and bit 0 is filled with the old value of the C flag.\n\t * The Z and N flags are updated too.\n\t */\n\t{\n\t\tid: \"ROL\",\n\t\texecute: ({ cpu, memory }, address) => {\n\t\t\tconst value = memory.readAt(address);\n\t\t\tconst result = (value << 1) | +cpu.flags.c;\n\t\t\tconst newValue = Byte.force8Bit(result);\n\n\t\t\tmemory.writeAt(address, newValue);\n\t\t\tcpu.flags.updateZeroAndNegative(newValue);\n\t\t\tcpu.flags.c = !!Byte.getBit(value, 7);\n\t\t}\n\t},\n\n\t/**\n\t * Rotate Right\n\t *\n\t * Moves all the bits of the value held at `address` one place to the right.\n\t * Bit 0 is placed in the C flag and bit 7 is filled with the old value of the C flag.\n\t * The Z and N flags are updated too.\n\t */\n\t{\n\t\tid: \"ROR\",\n\t\texecute: ({ cpu, memory }, address) => {\n\t\t\tconst value = memory.readAt(address);\n\t\t\tconst result = (value >> 1) | (+cpu.flags.c << 7);\n\t\t\tconst newValue = Byte.force8Bit(result);\n\n\t\t\tmemory.writeAt(address, newValue);\n\t\t\tcpu.flags.updateZeroAndNegative(newValue);\n\t\t\tcpu.flags.c = !!Byte.getBit(value, 0);\n\t\t}\n\t},\n\n\t/**\n\t * Subtract with Carry\n\t *\n\t * Substracts the contents of `value` to A together with the not of the carry bit.\n\t * The Z, N, C (set if there was no borrow), and V (set when sign is wrong) flags are updated.\n\t * It's implemented as an ADC call with the negative representation of `value` - 1.\n\t */\n\t{\n\t\tid: \"SBC\",\n\t\tneedsValue: true,\n\t\texecute: (context, value) => ADC(context, Byte.negate(value) - 1)\n\t}\n];\n\nconst ADC = ({ cpu }, value) => {\n\tconst oldValue = cpu.registers.a.value;\n\tconst result = oldValue + value + cpu.flags.c;\n\tconst newValue = Byte.force8Bit(result);\n\n\tcpu.registers.a.value = newValue;\n\tcpu.flags.updateZeroAndNegative(newValue);\n\tcpu.flags.c = Byte.hasOverflow(result);\n\tcpu.flags.v =\n\t\t(Byte.isPositive(oldValue) &&\n\t\t\tByte.isPositive(value) &&\n\t\t\tByte.isNegative(newValue)) ||\n\t\t(Byte.isNegative(oldValue) &&\n\t\t\tByte.isNegative(value) &&\n\t\t\tByte.isPositive(newValue));\n};\n\nconst DE_ = (registerName) => {\n\treturn ({ cpu }) => {\n\t\tconst register = cpu.registers[registerName];\n\t\tregister.decrement();\n\t\tcpu.flags.updateZeroAndNegative(register.value);\n\t};\n};\n\nconst IN_ = (registerName) => {\n\treturn ({ cpu }) => {\n\t\tconst register = cpu.registers[registerName];\n\t\tregister.increment();\n\t\tcpu.flags.updateZeroAndNegative(register.value);\n\t};\n};\n\nexport default instructions();\n","const instructions = () => [\n\t/**\n\t * Branch if Carry Clear\n\t *\n\t * If the C flag is clear, jumps to `address`.\n\t */\n\t{\n\t\tid: \"BCC\",\n\t\texecute: B__(\"c\", false)\n\t},\n\n\t/**\n\t * Branch if Carry Set\n\t *\n\t * If the C flag is set, jumps to `address`.\n\t */\n\t{\n\t\tid: \"BCS\",\n\t\texecute: B__(\"c\", true)\n\t},\n\n\t/**\n\t * Branch if Equal\n\t *\n\t * If the Z flag is set, jumps to `address`.\n\t */\n\t{\n\t\tid: \"BEQ\",\n\t\texecute: B__(\"z\", true)\n\t},\n\n\t/**\n\t * Branch if Minus\n\t *\n\t * If the N flag is set, jumps to `address`.\n\t */\n\t{\n\t\tid: \"BMI\",\n\t\texecute: B__(\"n\", true)\n\t},\n\n\t/**\n\t * Branch if Not Equal\n\t *\n\t * If the Z flag is clear, jumps to `address`.\n\t */\n\t{\n\t\tid: \"BNE\",\n\t\texecute: B__(\"z\", false)\n\t},\n\n\t/**\n\t * Branch if Positive\n\t *\n\t * If the N flag is clear, jumps to `address`.\n\t */\n\t{\n\t\tid: \"BPL\",\n\t\texecute: B__(\"n\", false)\n\t},\n\n\t/**\n\t * Branch if Overflow Clear\n\t *\n\t * If the V flag is clear, jumps to `address`.\n\t */\n\t{\n\t\tid: \"BVC\",\n\t\texecute: B__(\"v\", false)\n\t},\n\n\t/**\n\t * Branch if Overflow Set\n\t *\n\t * If the V flag is set, jumps to `address`.\n\t */\n\t{\n\t\tid: \"BVS\",\n\t\texecute: B__(\"v\", true)\n\t},\n\n\t/**\n\t * Jump\n\t *\n\t * Jumps to `address`.\n\t */\n\t{\n\t\tid: \"JMP\",\n\t\texecute: ({ cpu }, address) => {\n\t\t\tcpu.pc.value = address;\n\t\t}\n\t},\n\n\t/**\n\t * Jump to Subroutine\n\t *\n\t * Pushes the current program counter (minus one) on to the stack and jumps to `address`.\n\t */\n\t{\n\t\tid: \"JSR\",\n\t\texecute: ({ cpu }, address) => {\n\t\t\tcpu.stack.push2Bytes(cpu.pc.value - 1);\n\t\t\tcpu.pc.value = address;\n\t\t}\n\t},\n\n\t/**\n\t * Return from Interrupt\n\t *\n\t * Pulls the flags from the stack followed by the program counter.\n\t */\n\t{\n\t\tid: \"RTI\",\n\t\texecute: ({ cpu }) => {\n\t\t\tcpu.flags.load(cpu.stack.pop());\n\t\t\tcpu.pc.value = cpu.stack.pop2Bytes();\n\t\t}\n\t},\n\n\t/**\n\t * Return from Subroutine\n\t *\n\t * Pulls the program counter (plus one) from the stack.\n\t */\n\t{\n\t\tid: \"RTS\",\n\t\texecute: ({ cpu }) => {\n\t\t\tcpu.pc.value = cpu.stack.pop2Bytes() + 1;\n\t\t}\n\t}\n];\n\nconst B__ = (flag, value) => {\n\treturn ({ cpu }, address) => {\n\t\tif (cpu.flags[flag] === value) {\n\t\t\tcpu.pc.value = address;\n\t\t\tcpu.extraCycles++;\n\t\t} else {\n\t\t\tcpu.extraCycles = 0;\n\t\t}\n\t};\n};\n\nexport default instructions();\n","import { Byte } from \"../../helpers\";\n\nconst instructions = () => [\n\t/**\n\t * Bit Test\n\t *\n\t * Tests if one or more bits are set in a `value`.\n\t * The mask pattern in A is ANDed with the value to set or clear the Z flag,\n\t * but the the result is not kept.\n\t * Bits 7 and 6 of the value are copied into the N and V flags.\n\t */\n\t{\n\t\tid: \"BIT\",\n\t\tneedsValue: true,\n\t\texecute: ({ cpu }, value) => {\n\t\t\tconst mask = cpu.registers.a.value;\n\t\t\tconst result = value & mask;\n\n\t\t\tcpu.flags.updateZero(result);\n\t\t\tcpu.flags.updateNegative(value);\n\t\t\tcpu.flags.v = !!Byte.getBit(value, 6);\n\t\t}\n\t},\n\n\t/**\n\t * Compare\n\t *\n\t * Compares A with `value`, setting the flags:\n\t * Z (if A = `value`), N (if bit 7 of A - `value` is set) and C (if A >= `value`).\n\t */\n\t{\n\t\tid: \"CMP\",\n\t\tneedsValue: true,\n\t\texecute: CP_(\"a\")\n\t},\n\n\t/**\n\t * Compare X Register\n\t *\n\t * Compares X with `value`, setting the flags:\n\t * Z (if X = `value`), N (if bit 7 of X - `value` is set) and C (if X >= `value`).\n\t */\n\t{\n\t\tid: \"CPX\",\n\t\tneedsValue: true,\n\t\texecute: CP_(\"x\")\n\t},\n\n\t/**\n\t * Compare Y Register\n\t *\n\t * Compares Y with `value`, setting the flags:\n\t * Z (if Y = `value`), N (if bit 7 of Y - `value` is set) and C (if Y >= `value`).\n\t */\n\t{\n\t\tid: \"CPY\",\n\t\tneedsValue: true,\n\t\texecute: CP_(\"y\")\n\t}\n];\n\nconst CP_ = (registerName) => {\n\treturn ({ cpu }, value) => {\n\t\tconst source = cpu.registers[registerName].value;\n\t\tcpu.flags.z = source === value;\n\t\tcpu.flags.updateNegative(Byte.force8Bit(source - value));\n\t\tcpu.flags.c = source >= value;\n\t};\n};\n\nexport default instructions();\n","const instructions = () => [\n\t/**\n\t * Clear Carry Flag\n\t *\n\t * Clears the C flag.\n\t */\n\t{\n\t\tid: \"CLC\",\n\t\texecute: CL_(\"c\")\n\t},\n\n\t/**\n\t * Clear Decimal Mode\n\t *\n\t * Clears the D flag.\n\t */\n\t{\n\t\tid: \"CLD\",\n\t\texecute: CL_(\"d\")\n\t},\n\n\t/**\n\t * Clear Interrupt Disable\n\t *\n\t * Clears the I flag.\n\t */\n\t{\n\t\tid: \"CLI\",\n\t\texecute: CL_(\"i\")\n\t},\n\n\t/**\n\t * Clear Overflow Flag\n\t *\n\t * Clears the V flag.\n\t */\n\t{\n\t\tid: \"CLV\",\n\t\texecute: CL_(\"v\")\n\t},\n\n\t/**\n\t * Load Accumulator\n\t *\n\t * Loads `value` into A, updating the Z and N flags.\n\t */\n\t{\n\t\tid: \"LDA\",\n\t\tneedsValue: true,\n\t\texecute: LD_(\"a\")\n\t},\n\n\t/**\n\t * Load X Register\n\t *\n\t * Loads `value` into X, updating the Z and N flags.\n\t */\n\t{\n\t\tid: \"LDX\",\n\t\tneedsValue: true,\n\t\texecute: LD_(\"x\")\n\t},\n\n\t/**\n\t * Load Y Register\n\t *\n\t * Loads `value` into Y, updating the Z and N flags.\n\t */\n\t{\n\t\tid: \"LDY\",\n\t\tneedsValue: true,\n\t\texecute: LD_(\"y\")\n\t},\n\n\t/**\n\t * Push Accumulator\n\t *\n\t * Pushes A into the stack.\n\t */\n\t{\n\t\tid: \"PHA\",\n\t\texecute: ({ cpu }) => {\n\t\t\tcpu.stack.push(cpu.registers.a.value);\n\t\t}\n\t},\n\n\t/**\n\t * Push Processor Status\n\t *\n\t * Pushes the flags (as a byte, with B2 set) into the stack.\n\t */\n\t{\n\t\tid: \"PHP\",\n\t\texecute: ({ cpu }) => {\n\t\t\tcpu.pushFlags(true);\n\t\t}\n\t},\n\n\t/**\n\t * Pull Accumulator\n\t *\n\t * Pulls a byte from the stack into A, updating the Z and N flags.\n\t */\n\t{\n\t\tid: \"PLA\",\n\t\texecute: ({ cpu }) => {\n\t\t\tconst value = cpu.stack.pop();\n\t\t\tcpu.registers.a.value = value;\n\t\t\tcpu.flags.updateZeroAndNegative(value);\n\t\t}\n\t},\n\n\t/**\n\t * Pull Processor Status\n\t *\n\t * Pulls a byte from the stack into the flags.\n\t */\n\t{\n\t\tid: \"PLP\",\n\t\texecute: ({ cpu }) => {\n\t\t\tcpu.flags.load(cpu.stack.pop());\n\t\t}\n\t},\n\n\t/**\n\t * Set Carry Flag\n\t *\n\t * Sets the C flag.\n\t */\n\t{\n\t\tid: \"SEC\",\n\t\texecute: SE_(\"c\")\n\t},\n\n\t/**\n\t * Set Decimal Flag\n\t *\n\t * Sets the D flag.\n\t */\n\t{\n\t\tid: \"SED\",\n\t\texecute: SE_(\"d\")\n\t},\n\n\t/**\n\t * Set Interrupt Disable\n\t *\n\t * Sets the I flag.\n\t */\n\t{\n\t\tid: \"SEI\",\n\t\texecute: SE_(\"i\")\n\t},\n\n\t/**\n\t * Store Accumulator\n\t *\n\t * Stores the contents of A into `address`.\n\t */\n\t{\n\t\tid: \"STA\",\n\t\texecute: ST_(\"a\")\n\t},\n\n\t/**\n\t * Store X Register\n\t *\n\t * Stores the contents of X into `address`.\n\t */\n\t{\n\t\tid: \"STX\",\n\t\texecute: ST_(\"x\")\n\t},\n\n\t/**\n\t * Store Y Register\n\t *\n\t * Stores the contents of Y into `address`.\n\t */\n\t{\n\t\tid: \"STY\",\n\t\texecute: ST_(\"y\")\n\t},\n\n\t/**\n\t * Transfer Accumulator to X\n\t *\n\t * Copies A into X, updating the Z and N flags.\n\t */\n\t{\n\t\tid: \"TAX\",\n\t\texecute: T__((cpu) => cpu.registers.a, (cpu) => cpu.registers.x)\n\t},\n\n\t/**\n\t * Transfer Accumulator to Y\n\t *\n\t * Copies A into Y, updating the Z and N flags.\n\t */\n\t{\n\t\tid: \"TAY\",\n\t\texecute: T__((cpu) => cpu.registers.a, (cpu) => cpu.registers.y)\n\t},\n\n\t/**\n\t * Transfer Stack Pointer to X\n\t *\n\t * Copies SP into X, updating the Z and N flags.\n\t */\n\t{\n\t\tid: \"TSX\",\n\t\texecute: T__((cpu) => cpu.sp, (cpu) => cpu.registers.x)\n\t},\n\n\t/**\n\t * Transfer X to Accumulator\n\t *\n\t * Copies X into A, updating the Z and N flags.\n\t */\n\t{\n\t\tid: \"TXA\",\n\t\texecute: T__((cpu) => cpu.registers.x, (cpu) => cpu.registers.a)\n\t},\n\n\t/**\n\t * Transfer X to Stack Pointer\n\t *\n\t * Copies X into SP, WITHOUT updating any flag.\n\t */\n\t{\n\t\tid: \"TXS\",\n\t\texecute: T__((cpu) => cpu.registers.x, (cpu) => cpu.sp, false)\n\t},\n\n\t/**\n\t * Transfer Y to Accumulator\n\t *\n\t * Copies Y into A, updating the Z and N flags.\n\t */\n\t{\n\t\tid: \"TYA\",\n\t\texecute: T__((cpu) => cpu.registers.y, (cpu) => cpu.registers.a)\n\t}\n];\n\nconst SE_ = (flagName) => {\n\treturn ({ cpu }) => {\n\t\tcpu.flags[flagName] = true;\n\t};\n};\n\nconst CL_ = (flagName) => {\n\treturn ({ cpu }) => {\n\t\tcpu.flags[flagName] = false;\n\t};\n};\n\nconst LD_ = (registerName) => {\n\treturn ({ cpu }, value) => {\n\t\tcpu.registers[registerName].value = value;\n\t\tcpu.flags.updateZeroAndNegative(value);\n\t};\n};\n\nconst ST_ = (registerName) => {\n\treturn ({ cpu, memory }, address) => {\n\t\tconst value = cpu.registers[registerName].value;\n\t\tmemory.writeAt(address, value);\n\t};\n};\n\nconst T__ = (getSourceRegister, getTargetRegister, updateFlags = true) => {\n\treturn ({ cpu }) => {\n\t\tconst value = getSourceRegister(cpu).value;\n\t\tgetTargetRegister(cpu).value = value;\n\t\tif (updateFlags) cpu.flags.updateZeroAndNegative(value);\n\t};\n};\n\nexport default instructions();\n","const instructions = () => [\n\t/**\n\t * Logical AND\n\t *\n\t * Performs a \"bit by bit\" logical AND between A and `value`, storing\n\t * the result in A and setting the Z (zero) and N (negative) flags.\n\t */\n\t{\n\t\tid: \"AND\",\n\t\tneedsValue: true,\n\t\texecute: LOGICAL_INSTRUCTION((one, another) => one & another)\n\t},\n\n\t/**\n\t * Exclusive OR\n\t *\n\t * Performs a \"bit by bit\" exclusive OR between A and `value`, storing\n\t * the result in A and setting the Z (zero) and N (negative) flags.\n\t */\n\t{\n\t\tid: \"EOR\",\n\t\tneedsValue: true,\n\t\texecute: LOGICAL_INSTRUCTION((one, another) => one ^ another)\n\t},\n\n\t/**\n\t * Logical Inclusive OR\n\t *\n\t * Performs a \"bit by bit\" logical inclusive OR between A and `value`, storing\n\t * the result in A and setting the Z (zero) and N (negative) flags.\n\t */\n\t{\n\t\tid: \"ORA\",\n\t\tneedsValue: true,\n\t\texecute: LOGICAL_INSTRUCTION((one, another) => one | another)\n\t}\n];\n\nconst LOGICAL_INSTRUCTION = (operator) => {\n\treturn ({ cpu }, value) => {\n\t\tconst result = operator(cpu.registers.a.value, value);\n\t\tcpu.registers.a.value = result;\n\t\tcpu.flags.updateZeroAndNegative(result);\n\t};\n};\n\nexport default instructions();\n","import _ from \"lodash\";\n\nconst interrupts = [\n\t// Non-maskable interrupt (used to detect vertical blanking)\n\t{\n\t\tid: \"NMI\",\n\t\tvector: 0xfffa\n\t},\n\n\t// Reset\n\t{\n\t\tid: \"RESET\",\n\t\tvector: 0xfffc\n\t},\n\n\t// Interrupt request (temporarily stops the current program, and run an interrupt handler instead)\n\t{\n\t\tid: \"IRQ\",\n\t\tvector: 0xfffe\n\t}\n];\n\nexport default _.keyBy(interrupts, \"id\");\n","import { interrupts } from \"../constants\";\n\nconst instructions = () => [\n\t/**\n\t * Force Interrupt\n\t *\n\t * Forces the generation of an interrupt request.\n\t * The program counter and flags (with B2 set) are pushed on the stack, then the IRQ\n\t * interrupt vector at $FFFE/F is loaded into the PC.\n\t */\n\t{\n\t\tid: \"BRK\",\n\t\texecute: ({ cpu }) => {\n\t\t\tcpu.interrupt(interrupts.IRQ, true);\n\t\t}\n\t},\n\n\t/**\n\t * No Operation\n\t *\n\t * Causes no changes at all.\n\t */\n\t{\n\t\tid: \"NOP\",\n\t\texecute: (context) => {}\n\t}\n];\n\nexport default instructions();\n","import arithmetic from \"./arithmetic\";\nimport branching from \"./branching\";\nimport checks from \"./checks\";\nimport data from \"./data\";\nimport logical from \"./logical\";\nimport misc from \"./misc\";\nimport _ from \"lodash\";\n\nexport default _.keyBy(\n\t[...arithmetic, ...branching, ...checks, ...data, ...logical, ...misc],\n\t\"id\"\n);\n","/**\n * \"Implicit\" addressing mode.\n *\n * There's no extra parameter, it's implied by the instruction.\n */\nexport default {\n\tid: \"IMPLICIT\",\n\tparameterSize: 0,\n\tgetAddress: (context) => null,\n\tgetValue: () => {\n\t\tthrow new Error(\n\t\t\t\"The IMPLICIT addressing mode only supports the `getAddress` method (and it always returns null)\"\n\t\t);\n\t}\n};\n","/**\n * \"Immediate\" addressing mode.\n *\n * The parameter is the actual value to use.\n */\nexport default {\n\tid: \"IMMEDIATE\",\n\tparameterSize: 1,\n\tgetAddress: () => {\n\t\tthrow new Error(\n\t\t\t\"The IMMEDIATE addressing mode only supports the `getValue` method\"\n\t\t);\n\t},\n\tgetValue: (context, value) => value\n};\n","export default function(context, parameter, canTakeExtraCycles) {\n\tconst address = this.getAddress(context, parameter, canTakeExtraCycles);\n\treturn context.memory.readAt(address);\n}\n","import getValue from \"./_getValue\";\n\n/**\n * \"Absolute\" addressing mode.\n *\n * The parameter is an absolute memory address.\n */\nexport default {\n\tid: \"ABSOLUTE\",\n\tparameterSize: 2,\n\tgetAddress: (context, address) => address,\n\tgetValue\n};\n","import { Byte } from \"../../helpers\";\n\nexport default (register) => {\n\treturn function({ cpu }, address, canTakeExtraCycles) {\n\t\tconst newAddress = address + cpu.registers[register].value;\n\t\tconst pageCrossed =\n\t\t\tByte.highPartOf(address) !== Byte.highPartOf(newAddress);\n\n\t\tif (pageCrossed && canTakeExtraCycles) cpu.extraCycles++;\n\n\t\treturn Byte.force16Bit(newAddress);\n\t};\n};\n","import indexedGetAddress from \"./_indexedGetAddress\";\nimport getValue from \"./_getValue\";\n\n/**\n * \"Absolute,X\" addressing mode.\n *\n * The parameter is an absolute memory address.\n * The final address is that number plus the contents of X.\n */\nexport default {\n\tid: \"INDEXED_ABSOLUTE_X\",\n\tparameterSize: 2,\n\tgetAddress: indexedGetAddress(\"x\"),\n\tgetValue\n};\n","import indexedGetAddress from \"./_indexedGetAddress\";\nimport getValue from \"./_getValue\";\n\n/**\n * \"Absolute,Y\" addressing mode.\n *\n * The parameter is an absolute memory address.\n * The final address is that number plus the contents of Y.\n */\nexport default {\n\tid: \"INDEXED_ABSOLUTE_Y\",\n\tparameterSize: 2,\n\tgetAddress: indexedGetAddress(\"y\"),\n\tgetValue\n};\n","import getValue from \"./_getValue\";\n\n/**\n * \"Zero page\" addressing mode.\n *\n * The parameter is a single-byte memory address.\n * Only the first page (the first 256 bytes) of memory is accessible.\n */\nexport default {\n\tid: \"ZERO_PAGE\",\n\tparameterSize: 1,\n\tgetAddress: (context, address) => address,\n\tgetValue\n};\n","import { Byte } from \"../../helpers\";\nimport indexedGetAddress from \"./_indexedGetAddress\";\nimport getValue from \"./_getValue\";\n\nconst indexedGetAddressX = indexedGetAddress(\"x\");\n\n/**\n * \"Zero page,X\" addressing mode.\n *\n * The parameter is a single-byte memory address.\n * The final address is that number plus the contents of X.\n */\nexport default {\n\tid: \"INDEXED_ZERO_PAGE_X\",\n\tparameterSize: 1,\n\tgetAddress: (context, address) => {\n\t\treturn Byte.force8Bit(indexedGetAddressX(context, address, false));\n\t},\n\tgetValue\n};\n","import { Byte } from \"../../helpers\";\nimport indexedGetAddress from \"./_indexedGetAddress\";\nimport getValue from \"./_getValue\";\n\nconst indexedGetAddressY = indexedGetAddress(\"y\");\n\n/**\n * \"Zero page,Y\" addressing mode.\n *\n * The parameter is a single-byte memory address.\n * The final address is that number plus the contents of Y.\n */\nexport default {\n\tid: \"INDEXED_ZERO_PAGE_Y\",\n\tparameterSize: 1,\n\tgetAddress: (context, address) => {\n\t\treturn Byte.force8Bit(indexedGetAddressY(context, address, false));\n\t},\n\tgetValue\n};\n","import { Byte } from \"../../helpers\";\nimport getValue from \"./_getValue\";\n\n/**\n * \"Indirect\" addressing mode.\n *\n * The parameter is an absolute memory address to look up another address.\n * The byte readed from memory gives the least significant byte of the final\n * address, and the following byte gives the most significant byte.\n *\n * This addressing mode has a bug:\n * If `address` falls on a page boundary ($xxFF), it fetches the least significative byte from\n * $xxFF as expected, but takes the most significative byte from $xx00.\n */\nexport default {\n\tid: \"INDIRECT\",\n\tparameterSize: 2,\n\tgetAddress: ({ memory }, address) => {\n\t\tconst msb = Byte.highPartOf(address);\n\t\tconst lsb = Byte.lowPartOf(address);\n\t\tconst low = memory.readAt(address);\n\t\tconst high = memory.readAt(\n\t\t\tlsb === 0xff ? Byte.to16Bit(msb, 0x00) : address + 1\n\t\t);\n\n\t\treturn Byte.to16Bit(high, low);\n\t},\n\tgetValue\n};\n\nexport const getIndirectAddress = (\n\t{ memory },\n\taddress,\n\ttransform = (it) => it\n) => {\n\tconst start = transform(address);\n\tconst end = transform(start + 1);\n\tconst low = memory.readAt(start);\n\tconst high = memory.readAt(end);\n\n\treturn Byte.to16Bit(high, low);\n};\n","import { Byte } from \"../../helpers\";\nimport { getIndirectAddress } from \"./indirect\";\nimport getValue from \"./_getValue\";\n\n/**\n * \"Indexed indirect\" addressing mode.\n *\n * The parameter is a single-byte memory address, but the contents of X is\n * added to that address, and the result is used to look up a two-byte address.\n */\nexport default {\n\tid: \"INDEXED_INDIRECT_X\",\n\tparameterSize: 1,\n\tgetAddress: (context, address) => {\n\t\treturn getIndirectAddress(\n\t\t\tcontext,\n\t\t\taddress + context.cpu.registers.x.value,\n\t\t\tByte.force8Bit\n\t\t);\n\t},\n\tgetValue\n};\n","import { Byte } from \"../../helpers\";\nimport { getIndirectAddress } from \"./indirect\";\nimport indexedGetAddress from \"./_indexedGetAddress\";\nimport getValue from \"./_getValue\";\n\nconst indexedGetAddressY = indexedGetAddress(\"y\");\n\n/**\n * \"Indirect indexed\" addressing mode.\n *\n * The parameter is a single-byte memory address, which is dereferenced.\n * Then, the contents of Y is added to get the final address.\n */\nexport default {\n\tid: \"INDEXED_INDIRECT_Y\",\n\tparameterSize: 1,\n\tgetAddress: (context, address, canTakeExtraCycles) => {\n\t\treturn indexedGetAddressY(\n\t\t\tcontext,\n\t\t\tgetIndirectAddress(context, address, Byte.force8Bit),\n\t\t\tcanTakeExtraCycles\n\t\t);\n\t},\n\tgetValue\n};\n","import { Byte } from \"../../helpers\";\nimport getValue from \"./_getValue\";\n\n/**\n * \"Relative\" addressing mode.\n *\n * The parameter is a signed relative offset from the following instruction.\n */\nexport default {\n\tid: \"RELATIVE\",\n\tparameterSize: 1,\n\tgetAddress: ({ cpu }, offset, canTakeExtraCycles) => {\n\t\tconst address = cpu.pc.value;\n\t\tconst newAddress = address + Byte.toNumber(offset);\n\t\tconst pageCrossed =\n\t\t\tByte.highPartOf(address) !== Byte.highPartOf(newAddress);\n\n\t\tif (pageCrossed && canTakeExtraCycles) cpu.extraCycles += 2;\n\n\t\treturn Byte.force16Bit(newAddress);\n\t},\n\tgetValue\n};\n","/**\n * \"Accummulator\" addressing mode.\n *\n * The parameter is the A register.\n */\nexport default {\n\tid: \"ACCUMULATOR\",\n\tparameterSize: 0,\n\tgetAddress: ({ cpu }) => cpu.registers.a,\n\tgetValue: () => {\n\t\tthrow new Error(\n\t\t\t\"The ACCUMULATOR addressing mode only supports the `getAddress` method\"\n\t\t);\n\t}\n};\n","import implicit from \"./implicit\";\nimport immediate from \"./immediate\";\nimport absolute from \"./absolute\";\nimport indexedAbsoluteX from \"./indexedAbsoluteX\";\nimport indexedAbsoluteY from \"./indexedAbsoluteY\";\nimport zeroPage from \"./zeroPage\";\nimport indexedZeroPageX from \"./indexedZeroPageX\";\nimport indexedZeroPageY from \"./indexedZeroPageY\";\nimport indirect from \"./indirect\";\nimport indexedIndirectX from \"./indexedIndirectX\";\nimport indexedIndirectY from \"./indexedIndirectY\";\nimport relative from \"./relative\";\nimport accumulator from \"./accumulator\";\nimport _ from \"lodash\";\n\nexport default _.keyBy(\n\t[\n\t\timplicit,\n\t\timmediate,\n\t\tabsolute,\n\t\tindexedAbsoluteX,\n\t\tindexedAbsoluteY,\n\t\tzeroPage,\n\t\tindexedZeroPageX,\n\t\tindexedZeroPageY,\n\t\tindirect,\n\t\tindexedIndirectX,\n\t\tindexedIndirectY,\n\t\trelative,\n\t\taccumulator\n\t],\n\t\"id\"\n);\n","import instructions from \"../instructions\";\nimport addressings from \"../addressings\";\n\nexport default [\n\t{\n\t\tid: 0x69,\n\t\tinstruction: instructions.ADC,\n\t\tcycles: 2,\n\t\taddressing: addressings.IMMEDIATE\n\t},\n\t{\n\t\tid: 0x65,\n\t\tinstruction: instructions.ADC,\n\t\tcycles: 3,\n\t\taddressing: addressings.ZERO_PAGE\n\t},\n\t{\n\t\tid: 0x75,\n\t\tinstruction: instructions.ADC,\n\t\tcycles: 4,\n\t\taddressing: addressings.INDEXED_ZERO_PAGE_X\n\t},\n\t{\n\t\tid: 0x6d,\n\t\tinstruction: instructions.ADC,\n\t\tcycles: 4,\n\t\taddressing: addressings.ABSOLUTE\n\t},\n\t{\n\t\tid: 0x7d,\n\t\tinstruction: instructions.ADC,\n\t\tcycles: 4,\n\t\taddressing: addressings.INDEXED_ABSOLUTE_X,\n\t\tcanTakeExtraCycles: true\n\t},\n\t{\n\t\tid: 0x79,\n\t\tinstruction: instructions.ADC,\n\t\tcycles: 4,\n\t\taddressing: addressings.INDEXED_ABSOLUTE_Y,\n\t\tcanTakeExtraCycles: true\n\t},\n\t{\n\t\tid: 0x61,\n\t\tinstruction: instructions.ADC,\n\t\tcycles: 6,\n\t\taddressing: addressings.INDEXED_INDIRECT_X\n\t},\n\t{\n\t\tid: 0x71,\n\t\tinstruction: instructions.ADC,\n\t\tcycles: 5,\n\t\taddressing: addressings.INDEXED_INDIRECT_Y,\n\t\tcanTakeExtraCycles: true\n\t},\n\t{\n\t\tid: 0x0a,\n\t\tinstruction: instructions.ASL,\n\t\tcycles: 2,\n\t\taddressing: addressings.ACCUMULATOR\n\t},\n\t{\n\t\tid: 0x06,\n\t\tinstruction: instructions.ASL,\n\t\tcycles: 5,\n\t\taddressing: addressings.ZERO_PAGE\n\t},\n\t{\n\t\tid: 0x16,\n\t\tinstruction: instructions.ASL,\n\t\tcycles: 6,\n\t\taddressing: addressings.INDEXED_ZERO_PAGE_X\n\t},\n\t{\n\t\tid: 0x0e,\n\t\tinstruction: instructions.ASL,\n\t\tcycles: 6,\n\t\taddressing: addressings.ABSOLUTE\n\t},\n\t{\n\t\tid: 0x1e,\n\t\tinstruction: instructions.ASL,\n\t\tcycles: 7,\n\t\taddressing: addressings.INDEXED_ABSOLUTE_X\n\t},\n\t{\n\t\tid: 0xc6,\n\t\tinstruction: instructions.DEC,\n\t\tcycles: 5,\n\t\taddressing: addressings.ZERO_PAGE\n\t},\n\t{\n\t\tid: 0xd6,\n\t\tinstruction: instructions.DEC,\n\t\tcycles: 6,\n\t\taddressing: addressings.INDEXED_ZERO_PAGE_X\n\t},\n\t{\n\t\tid: 0xce,\n\t\tinstruction: instructions.DEC,\n\t\tcycles: 6,\n\t\taddressing: addressings.ABSOLUTE\n\t},\n\t{\n\t\tid: 0xde,\n\t\tinstruction: instructions.DEC,\n\t\tcycles: 7,\n\t\taddressing: addressings.INDEXED_ABSOLUTE_X\n\t},\n\t{\n\t\tid: 0xca,\n\t\tinstruction: instructions.DEX,\n\t\tcycles: 2,\n\t\taddressing: addressings.IMPLICIT\n\t},\n\t{\n\t\tid: 0x88,\n\t\tinstruction: instructions.DEY,\n\t\tcycles: 2,\n\t\taddressing: addressings.IMPLICIT\n\t},\n\t{\n\t\tid: 0xe6,\n\t\tinstruction: instructions.INC,\n\t\tcycles: 5,\n\t\taddressing: addressings.ZERO_PAGE\n\t},\n\t{\n\t\tid: 0xf6,\n\t\tinstruction: instructions.INC,\n\t\tcycles: 6,\n\t\taddressing: addressings.INDEXED_ZERO_PAGE_X\n\t},\n\t{\n\t\tid: 0xee,\n\t\tinstruction: instructions.INC,\n\t\tcycles: 6,\n\t\taddressing: addressings.ABSOLUTE\n\t},\n\t{\n\t\tid: 0xfe,\n\t\tinstruction: instructions.INC,\n\t\tcycles: 7,\n\t\taddressing: addressings.INDEXED_ABSOLUTE_X\n\t},\n\t{\n\t\tid: 0xe8,\n\t\tinstruction: instructions.INX,\n\t\tcycles: 2,\n\t\taddressing: addressings.IMPLICIT\n\t},\n\t{\n\t\tid: 0xc8,\n\t\tinstruction: instructions.INY,\n\t\tcycles: 2,\n\t\taddressing: addressings.IMPLICIT\n\t},\n\t{\n\t\tid: 0x4a,\n\t\tinstruction: instructions.LSR,\n\t\tcycles: 2,\n\t\taddressing: addressings.ACCUMULATOR\n\t},\n\t{\n\t\tid: 0x46,\n\t\tinstruction: instructions.LSR,\n\t\tcycles: 5,\n\t\taddressing: addressings.ZERO_PAGE\n\t},\n\t{\n\t\tid: 0x56,\n\t\tinstruction: instructions.LSR,\n\t\tcycles: 6,\n\t\taddressing: addressings.INDEXED_ZERO_PAGE_X\n\t},\n\t{\n\t\tid: 0x4e,\n\t\tinstruction: instructions.LSR,\n\t\tcycles: 6,\n\t\taddressing: addressings.ABSOLUTE\n\t},\n\t{\n\t\tid: 0x5e,\n\t\tinstruction: instructions.LSR,\n\t\tcycles: 7,\n\t\taddressing: addressings.INDEXED_ABSOLUTE_X\n\t},\n\t{\n\t\tid: 0x2a,\n\t\tinstruction: instructions.ROL,\n\t\tcycles: 2,\n\t\taddressing: addressings.ACCUMULATOR\n\t},\n\t{\n\t\tid: 0x26,\n\t\tinstruction: instructions.ROL,\n\t\tcycles: 5,\n\t\taddressing: addressings.ZERO_PAGE\n\t},\n\t{\n\t\tid: 0x36,\n\t\tinstruction: instructions.ROL,\n\t\tcycles: 6,\n\t\taddressing: addressings.INDEXED_ZERO_PAGE_X\n\t},\n\t{\n\t\tid: 0x2e,\n\t\tinstruction: instructions.ROL,\n\t\tcycles: 6,\n\t\taddressing: addressings.ABSOLUTE\n\t},\n\t{\n\t\tid: 0x3e,\n\t\tinstruction: instructions.ROL,\n\t\tcycles: 7,\n\t\taddressing: addressings.INDEXED_ABSOLUTE_X\n\t},\n\t{\n\t\tid: 0x6a,\n\t\tinstruction: instructions.ROR,\n\t\tcycles: 2,\n\t\taddressing: addressings.ACCUMULATOR\n\t},\n\t{\n\t\tid: 0x66,\n\t\tinstruction: instructions.ROR,\n\t\tcycles: 5,\n\t\taddressing: addressings.ZERO_PAGE\n\t},\n\t{\n\t\tid: 0x76,\n\t\tinstruction: instructions.ROR,\n\t\tcycles: 6,\n\t\taddressing: addressings.INDEXED_ZERO_PAGE_X\n\t},\n\t{\n\t\tid: 0x6e,\n\t\tinstruction: instructions.ROR,\n\t\tcycles: 6,\n\t\taddressing: addressings.ABSOLUTE\n\t},\n\t{\n\t\tid: 0x7e,\n\t\tinstruction: instructions.ROR,\n\t\tcycles: 7,\n\t\taddressing: addressings.INDEXED_ABSOLUTE_X\n\t},\n\t{\n\t\tid: 0xe9,\n\t\tinstruction: instructions.SBC,\n\t\tcycles: 2,\n\t\taddressing: addressings.IMMEDIATE\n\t},\n\t{\n\t\tid: 0xe5,\n\t\tinstruction: instructions.SBC,\n\t\tcycles: 3,\n\t\taddressing: addressings.ZERO_PAGE\n\t},\n\t{\n\t\tid: 0xf5,\n\t\tinstruction: instructions.SBC,\n\t\tcycles: 4,\n\t\taddressing: addressings.INDEXED_ZERO_PAGE_X\n\t},\n\t{\n\t\tid: 0xed,\n\t\tinstruction: instructions.SBC,\n\t\tcycles: 4,\n\t\taddressing: addressings.ABSOLUTE\n\t},\n\t{\n\t\tid: 0xfd,\n\t\tinstruction: instructions.SBC,\n\t\tcycles: 4,\n\t\taddressing: addressings.INDEXED_ABSOLUTE_X,\n\t\tcanTakeExtraCycles: true\n\t},\n\t{\n\t\tid: 0xf9,\n\t\tinstruction: instructions.SBC,\n\t\tcycles: 4,\n\t\taddressing: addressings.INDEXED_ABSOLUTE_Y,\n\t\tcanTakeExtraCycles: true\n\t},\n\t{\n\t\tid: 0xe1,\n\t\tinstruction: instructions.SBC,\n\t\tcycles: 6,\n\t\taddressing: addressings.INDEXED_INDIRECT_X\n\t},\n\t{\n\t\tid: 0xf1,\n\t\tinstruction: instructions.SBC,\n\t\tcycles: 5,\n\t\taddressing: addressings.INDEXED_INDIRECT_Y,\n\t\tcanTakeExtraCycles: true\n\t}\n];\n","import instructions from \"../instructions\";\nimport addressings from \"../addressings\";\n\nexport default [\n\t{\n\t\tid: 0x90,\n\t\tinstruction: instructions.BCC,\n\t\tcycles: 2,\n\t\taddressing: addressings.RELATIVE,\n\t\tcanTakeExtraCycles: true\n\t},\n\t{\n\t\tid: 0xb0,\n\t\tinstruction: instructions.BCS,\n\t\tcycles: 2,\n\t\taddressing: addressings.RELATIVE,\n\t\tcanTakeExtraCycles: true\n\t},\n\t{\n\t\tid: 0xf0,\n\t\tinstruction: instructions.BEQ,\n\t\tcycles: 2,\n\t\taddressing: addressings.RELATIVE,\n\t\tcanTakeExtraCycles: true\n\t},\n\t{\n\t\tid: 0x30,\n\t\tinstruction: instructions.BMI,\n\t\tcycles: 2,\n\t\taddressing: addressings.RELATIVE,\n\t\tcanTakeExtraCycles: true\n\t},\n\t{\n\t\tid: 0xd0,\n\t\tinstruction: instructions.BNE,\n\t\tcycles: 2,\n\t\taddressing: addressings.RELATIVE,\n\t\tcanTakeExtraCycles: true\n\t},\n\t{\n\t\tid: 0x10,\n\t\tinstruction: instructions.BPL,\n\t\tcycles: 2,\n\t\taddressing: addressings.RELATIVE,\n\t\tcanTakeExtraCycles: true\n\t},\n\t{\n\t\tid: 0x50,\n\t\tinstruction: instructions.BVC,\n\t\tcycles: 2,\n\t\taddressing: addressings.RELATIVE,\n\t\tcanTakeExtraCycles: true\n\t},\n\t{\n\t\tid: 0x70,\n\t\tinstruction: instructions.BVS,\n\t\tcycles: 2,\n\t\taddressing: addressings.RELATIVE,\n\t\tcanTakeExtraCycles: true\n\t},\n\t{\n\t\tid: 0x4c,\n\t\tinstruction: instructions.JMP,\n\t\tcycles: 3,\n\t\taddressing: addressings.ABSOLUTE\n\t},\n\t{\n\t\tid: 0x6c,\n\t\tinstruction: instructions.JMP,\n\t\tcycles: 5,\n\t\taddressing: addressings.INDIRECT\n\t},\n\t{\n\t\tid: 0x20,\n\t\tinstruction: instructions.JSR,\n\t\tcycles: 6,\n\t\taddressing: addressings.ABSOLUTE\n\t},\n\t{\n\t\tid: 0x40,\n\t\tinstruction: instructions.RTI,\n\t\tcycles: 6,\n\t\taddressing: addressings.IMPLICIT\n\t},\n\t{\n\t\tid: 0x60,\n\t\tinstruction: instructions.RTS,\n\t\tcycles: 6,\n\t\taddressing: addressings.IMPLICIT\n\t}\n];\n","import instructions from \"../instructions\";\nimport addressings from \"../addressings\";\n\nexport default [\n\t{\n\t\tid: 0x24,\n\t\tinstruction: instructions.BIT,\n\t\tcycles: 3,\n\t\taddressing: addressings.ZERO_PAGE\n\t},\n\t{\n\t\tid: 0x2c,\n\t\tinstruction: instructions.BIT,\n\t\tcycles: 4,\n\t\taddressing: addressings.ABSOLUTE\n\t},\n\t{\n\t\tid: 0xc9,\n\t\tinstruction: instructions.CMP,\n\t\tcycles: 2,\n\t\taddressing: addressings.IMMEDIATE\n\t},\n\t{\n\t\tid: 0xc5,\n\t\tinstruction: instructions.CMP,\n\t\tcycles: 3,\n\t\taddressing: addressings.ZERO_PAGE\n\t},\n\t{\n\t\tid: 0xd5,\n\t\tinstruction: instructions.CMP,\n\t\tcycles: 4,\n\t\taddressing: addressings.INDEXED_ZERO_PAGE_X\n\t},\n\t{\n\t\tid: 0xcd,\n\t\tinstruction: instructions.CMP,\n\t\tcycles: 4,\n\t\taddressing: addressings.ABSOLUTE\n\t},\n\t{\n\t\tid: 0xdd,\n\t\tinstruction: instructions.CMP,\n\t\tcycles: 4,\n\t\taddressing: addressings.INDEXED_ABSOLUTE_X,\n\t\tcanTakeExtraCycles: true\n\t},\n\t{\n\t\tid: 0xd9,\n\t\tinstruction: instructions.CMP,\n\t\tcycles: 4,\n\t\taddressing: addressings.INDEXED_ABSOLUTE_Y,\n\t\tcanTakeExtraCycles: true\n\t},\n\t{\n\t\tid: 0xc1,\n\t\tinstruction: instructions.CMP,\n\t\tcycles: 6,\n\t\taddressing: addressings.INDEXED_INDIRECT_X\n\t},\n\t{\n\t\tid: 0xd1,\n\t\tinstruction: instructions.CMP,\n\t\tcycles: 5,\n\t\taddressing: addressings.INDEXED_INDIRECT_Y,\n\t\tcanTakeExtraCycles: true\n\t},\n\t{\n\t\tid: 0xe0,\n\t\tinstruction: instructions.CPX,\n\t\tcycles: 2,\n\t\taddressing: addressings.IMMEDIATE\n\t},\n\t{\n\t\tid: 0xe4,\n\t\tinstruction: instructions.CPX,\n\t\tcycles: 3,\n\t\taddressing: addressings.ZERO_PAGE\n\t},\n\t{\n\t\tid: 0xec,\n\t\tinstruction: instructions.CPX,\n\t\tcycles: 4,\n\t\taddressing: addressings.ABSOLUTE\n\t},\n\t{\n\t\tid: 0xc0,\n\t\tinstruction: instructions.CPY,\n\t\tcycles: 2,\n\t\taddressing: addressings.IMMEDIATE\n\t},\n\t{\n\t\tid: 0xc4,\n\t\tinstruction: instructions.CPY,\n\t\tcycles: 3,\n\t\taddressing: addressings.ZERO_PAGE\n\t},\n\t{\n\t\tid: 0xcc,\n\t\tinstruction: instructions.CPY,\n\t\tcycles: 4,\n\t\taddressing: addressings.ABSOLUTE\n\t}\n];\n","import instructions from \"../instructions\";\nimport addressings from \"../addressings\";\n\nexport default [\n\t{\n\t\tid: 0x18,\n\t\tinstruction: instructions.CLC,\n\t\tcycles: 2,\n\t\taddressing: addressings.IMPLICIT\n\t},\n\t{\n\t\tid: 0xd8,\n\t\tinstruction: instructions.CLD,\n\t\tcycles: 2,\n\t\taddressing: addressings.IMPLICIT\n\t},\n\t{\n\t\tid: 0x58,\n\t\tinstruction: instructions.CLI,\n\t\tcycles: 2,\n\t\taddressing: addressings.IMPLICIT\n\t},\n\t{\n\t\tid: 0xb8,\n\t\tinstruction: instructions.CLV,\n\t\tcycles: 2,\n\t\taddressing: addressings.IMPLICIT\n\t},\n\t{\n\t\tid: 0xa9,\n\t\tinstruction: instructions.LDA,\n\t\tcycles: 2,\n\t\taddressing: addressings.IMMEDIATE\n\t},\n\t{\n\t\tid: 0xa5,\n\t\tinstruction: instructions.LDA,\n\t\tcycles: 3,\n\t\taddressing: addressings.ZERO_PAGE\n\t},\n\t{\n\t\tid: 0xb5,\n\t\tinstruction: instructions.LDA,\n\t\tcycles: 4,\n\t\taddressing: addressings.INDEXED_ZERO_PAGE_X\n\t},\n\t{\n\t\tid: 0xad,\n\t\tinstruction: instructions.LDA,\n\t\tcycles: 4,\n\t\taddressing: addressings.ABSOLUTE\n\t},\n\t{\n\t\tid: 0xbd,\n\t\tinstruction: instructions.LDA,\n\t\tcycles: 4,\n\t\taddressing: addressings.INDEXED_ABSOLUTE_X,\n\t\tcanTakeExtraCycles: true\n\t},\n\t{\n\t\tid: 0xb9,\n\t\tinstruction: instructions.LDA,\n\t\tcycles: 4,\n\t\taddressing: addressings.INDEXED_ABSOLUTE_Y,\n\t\tcanTakeExtraCycles: true\n\t},\n\t{\n\t\tid: 0xa1,\n\t\tinstruction: instructions.LDA,\n\t\tcycles: 6,\n\t\taddressing: addressings.INDEXED_INDIRECT_X\n\t},\n\t{\n\t\tid: 0xb1,\n\t\tinstruction: instructions.LDA,\n\t\tcycles: 5,\n\t\taddressing: addressings.INDEXED_INDIRECT_Y,\n\t\tcanTakeExtraCycles: true\n\t},\n\t{\n\t\tid: 0xa2,\n\t\tinstruction: instructions.LDX,\n\t\tcycles: 2,\n\t\taddressing: addressings.IMMEDIATE\n\t},\n\t{\n\t\tid: 0xa6,\n\t\tinstruction: instructions.LDX,\n\t\tcycles: 3,\n\t\taddressing: addressings.ZERO_PAGE\n\t},\n\t{\n\t\tid: 0xb6,\n\t\tinstruction: instructions.LDX,\n\t\tcycles: 4,\n\t\taddressing: addressings.INDEXED_ZERO_PAGE_Y\n\t},\n\t{\n\t\tid: 0xae,\n\t\tinstruction: instructions.LDX,\n\t\tcycles: 4,\n\t\taddressing: addressings.ABSOLUTE\n\t},\n\t{\n\t\tid: 0xbe,\n\t\tinstruction: instructions.LDX,\n\t\tcycles: 4,\n\t\taddressing: addressings.INDEXED_ABSOLUTE_Y,\n\t\tcanTakeExtraCycles: true\n\t},\n\t{\n\t\tid: 0xa0,\n\t\tinstruction: instructions.LDY,\n\t\tcycles: 2,\n\t\taddressing: addressings.IMMEDIATE\n\t},\n\t{\n\t\tid: 0xa4,\n\t\tinstruction: instructions.LDY,\n\t\tcycles: 3,\n\t\taddressing: addressings.ZERO_PAGE\n\t},\n\t{\n\t\tid: 0xb4,\n\t\tinstruction: instructions.LDY,\n\t\tcycles: 4,\n\t\taddressing: addressings.INDEXED_ZERO_PAGE_X\n\t},\n\t{\n\t\tid: 0xac,\n\t\tinstruction: instructions.LDY,\n\t\tcycles: 4,\n\t\taddressing: addressings.ABSOLUTE\n\t},\n\t{\n\t\tid: 0xbc,\n\t\tinstruction: instructions.LDY,\n\t\tcycles: 4,\n\t\taddressing: addressings.INDEXED_ABSOLUTE_X,\n\t\tcanTakeExtraCycles: true\n\t},\n\t{\n\t\tid: 0x48,\n\t\tinstruction: instructions.PHA,\n\t\tcycles: 3,\n\t\taddressing: addressings.IMPLICIT\n\t},\n\t{\n\t\tid: 0x08,\n\t\tinstruction: instructions.PHP,\n\t\tcycles: 3,\n\t\taddressing: addressings.IMPLICIT\n\t},\n\t{\n\t\tid: 0x68,\n\t\tinstruction: instructions.PLA,\n\t\tcycles: 4,\n\t\taddressing: addressings.IMPLICIT\n\t},\n\t{\n\t\tid: 0x28,\n\t\tinstruction: instructions.PLP,\n\t\tcycles: 4,\n\t\taddressing: addressings.IMPLICIT\n\t},\n\t{\n\t\tid: 0x38,\n\t\tinstruction: instructions.SEC,\n\t\tcycles: 2,\n\t\taddressing: addressings.IMPLICIT\n\t},\n\t{\n\t\tid: 0xf8,\n\t\tinstruction: instructions.SED,\n\t\tcycles: 2,\n\t\taddressing: addressings.IMPLICIT\n\t},\n\t{\n\t\tid: 0x78,\n\t\tinstruction: instructions.SEI,\n\t\tcycles: 2,\n\t\taddressing: addressings.IMPLICIT\n\t},\n\t{\n\t\tid: 0x85,\n\t\tinstruction: instructions.STA,\n\t\tcycles: 3,\n\t\taddressing: addressings.ZERO_PAGE\n\t},\n\t{\n\t\tid: 0x95,\n\t\tinstruction: instructions.STA,\n\t\tcycles: 4,\n\t\taddressing: addressings.INDEXED_ZERO_PAGE_X\n\t},\n\t{\n\t\tid: 0x8d,\n\t\tinstruction: instructions.STA,\n\t\tcycles: 4,\n\t\taddressing: addressings.ABSOLUTE\n\t},\n\t{\n\t\tid: 0x9d,\n\t\tinstruction: instructions.STA,\n\t\tcycles: 5,\n\t\taddressing: addressings.INDEXED_ABSOLUTE_X\n\t},\n\t{\n\t\tid: 0x99,\n\t\tinstruction: instructions.STA,\n\t\tcycles: 5,\n\t\taddressing: addressings.INDEXED_ABSOLUTE_Y\n\t},\n\t{\n\t\tid: 0x81,\n\t\tinstruction: instructions.STA,\n\t\tcycles: 6,\n\t\taddressing: addressings.INDEXED_INDIRECT_X\n\t},\n\t{\n\t\tid: 0x91,\n\t\tinstruction: instructions.STA,\n\t\tcycles: 6,\n\t\taddressing: addressings.INDEXED_INDIRECT_Y\n\t},\n\t{\n\t\tid: 0x86,\n\t\tinstruction: instructions.STX,\n\t\tcycles: 3,\n\t\taddressing: addressings.ZERO_PAGE\n\t},\n\t{\n\t\tid: 0x96,\n\t\tinstruction: instructions.STX,\n\t\tcycles: 4,\n\t\taddressing: addressings.INDEXED_ZERO_PAGE_Y\n\t},\n\t{\n\t\tid: 0x8e,\n\t\tinstruction: instructions.STX,\n\t\tcycles: 4,\n\t\taddressing: addressings.ABSOLUTE\n\t},\n\t{\n\t\tid: 0x84,\n\t\tinstruction: instructions.STY,\n\t\tcycles: 3,\n\t\taddressing: addressings.ZERO_PAGE\n\t},\n\t{\n\t\tid: 0x94,\n\t\tinstruction: instructions.STY,\n\t\tcycles: 4,\n\t\taddressing: addressings.INDEXED_ZERO_PAGE_X\n\t},\n\t{\n\t\tid: 0x8c,\n\t\tinstruction: instructions.STY,\n\t\tcycles: 4,\n\t\taddressing: addressings.ABSOLUTE\n\t},\n\t{\n\t\tid: 0xaa,\n\t\tinstruction: instructions.TAX,\n\t\tcycles: 2,\n\t\taddressing: addressings.IMPLICIT\n\t},\n\t{\n\t\tid: 0xa8,\n\t\tinstruction: instructions.TAY,\n\t\tcycles: 2,\n\t\taddressing: addressings.IMPLICIT\n\t},\n\t{\n\t\tid: 0xba,\n\t\tinstruction: instructions.TSX,\n\t\tcycles: 2,\n\t\taddressing: addressings.IMPLICIT\n\t},\n\t{\n\t\tid: 0x8a,\n\t\tinstruction: instructions.TXA,\n\t\tcycles: 2,\n\t\taddressing: addressings.IMPLICIT\n\t},\n\t{\n\t\tid: 0x9a,\n\t\tinstruction: instructions.TXS,\n\t\tcycles: 2,\n\t\taddressing: addressings.IMPLICIT\n\t},\n\t{\n\t\tid: 0x98,\n\t\tinstruction: instructions.TYA,\n\t\tcycles: 2,\n\t\taddressing: addressings.IMPLICIT\n\t}\n];\n","import instructions from \"../instructions\";\nimport addressings from \"../addressings\";\n\nexport default [\n\t{\n\t\tid: 0x29,\n\t\tinstruction: instructions.AND,\n\t\tcycles: 2,\n\t\taddressing: addressings.IMMEDIATE\n\t},\n\t{\n\t\tid: 0x25,\n\t\tinstruction: instructions.AND,\n\t\tcycles: 3,\n\t\taddressing: addressings.ZERO_PAGE\n\t},\n\t{\n\t\tid: 0x35,\n\t\tinstruction: instructions.AND,\n\t\tcycles: 4,\n\t\taddressing: addressings.INDEXED_ZERO_PAGE_X\n\t},\n\t{\n\t\tid: 0x2d,\n\t\tinstruction: instructions.AND,\n\t\tcycles: 4,\n\t\taddressing: addressings.ABSOLUTE\n\t},\n\t{\n\t\tid: 0x3d,\n\t\tinstruction: instructions.AND,\n\t\tcycles: 4,\n\t\taddressing: addressings.INDEXED_ABSOLUTE_X,\n\t\tcanTakeExtraCycles: true\n\t},\n\t{\n\t\tid: 0x39,\n\t\tinstruction: instructions.AND,\n\t\tcycles: 4,\n\t\taddressing: addressings.INDEXED_ABSOLUTE_Y,\n\t\tcanTakeExtraCycles: true\n\t},\n\t{\n\t\tid: 0x21,\n\t\tinstruction: instructions.AND,\n\t\tcycles: 6,\n\t\taddressing: addressings.INDEXED_INDIRECT_X\n\t},\n\t{\n\t\tid: 0x31,\n\t\tinstruction: instructions.AND,\n\t\tcycles: 5,\n\t\taddressing: addressings.INDEXED_INDIRECT_Y,\n\t\tcanTakeExtraCycles: true\n\t},\n\t{\n\t\tid: 0x49,\n\t\tinstruction: instructions.EOR,\n\t\tcycles: 2,\n\t\taddressing: addressings.IMMEDIATE\n\t},\n\t{\n\t\tid: 0x45,\n\t\tinstruction: instructions.EOR,\n\t\tcycles: 3,\n\t\taddressing: addressings.ZERO_PAGE\n\t},\n\t{\n\t\tid: 0x55,\n\t\tinstruction: instructions.EOR,\n\t\tcycles: 4,\n\t\taddressing: addressings.INDEXED_ZERO_PAGE_X\n\t},\n\t{\n\t\tid: 0x4d,\n\t\tinstruction: instructions.EOR,\n\t\tcycles: 4,\n\t\taddressing: addressings.ABSOLUTE\n\t},\n\t{\n\t\tid: 0x5d,\n\t\tinstruction: instructions.EOR,\n\t\tcycles: 4,\n\t\taddressing: addressings.INDEXED_ABSOLUTE_X,\n\t\tcanTakeExtraCycles: true\n\t},\n\t{\n\t\tid: 0x59,\n\t\tinstruction: instructions.EOR,\n\t\tcycles: 4,\n\t\taddressing: addressings.INDEXED_ABSOLUTE_Y,\n\t\tcanTakeExtraCycles: true\n\t},\n\t{\n\t\tid: 0x41,\n\t\tinstruction: instructions.EOR,\n\t\tcycles: 6,\n\t\taddressing: addressings.INDEXED_INDIRECT_X\n\t},\n\t{\n\t\tid: 0x51,\n\t\tinstruction: instructions.EOR,\n\t\tcycles: 5,\n\t\taddressing: addressings.INDEXED_INDIRECT_Y,\n\t\tcanTakeExtraCycles: true\n\t},\n\t{\n\t\tid: 0x09,\n\t\tinstruction: instructions.ORA,\n\t\tcycles: 2,\n\t\taddressing: addressings.IMMEDIATE\n\t},\n\t{\n\t\tid: 0x05,\n\t\tinstruction: instructions.ORA,\n\t\tcycles: 3,\n\t\taddressing: addressings.ZERO_PAGE\n\t},\n\t{\n\t\tid: 0x15,\n\t\tinstruction: instructions.ORA,\n\t\tcycles: 4,\n\t\taddressing: addressings.INDEXED_ZERO_PAGE_X\n\t},\n\t{\n\t\tid: 0x0d,\n\t\tinstruction: instructions.ORA,\n\t\tcycles: 4,\n\t\taddressing: addressings.ABSOLUTE\n\t},\n\t{\n\t\tid: 0x1d,\n\t\tinstruction: instructions.ORA,\n\t\tcycles: 4,\n\t\taddressing: addressings.INDEXED_ABSOLUTE_X,\n\t\tcanTakeExtraCycles: true\n\t},\n\t{\n\t\tid: 0x19,\n\t\tinstruction: instructions.ORA,\n\t\tcycles: 4,\n\t\taddressing: addressings.INDEXED_ABSOLUTE_Y,\n\t\tcanTakeExtraCycles: true\n\t},\n\t{\n\t\tid: 0x01,\n\t\tinstruction: instructions.ORA,\n\t\tcycles: 6,\n\t\taddressing: addressings.INDEXED_INDIRECT_X\n\t},\n\t{\n\t\tid: 0x11,\n\t\tinstruction: instructions.ORA,\n\t\tcycles: 5,\n\t\taddressing: addressings.INDEXED_INDIRECT_Y,\n\t\tcanTakeExtraCycles: true\n\t}\n];\n","import instructions from \"../instructions\";\nimport addressings from \"../addressings\";\n\nexport default [\n\t{\n\t\tid: 0x00,\n\t\tinstruction: instructions.BRK,\n\t\tcycles: 0,\n\t\taddressing: addressings.IMPLICIT\n\t},\n\t{\n\t\tid: 0xea,\n\t\tinstruction: instructions.NOP,\n\t\tcycles: 2,\n\t\taddressing: addressings.IMPLICIT\n\t}\n];\n","import arithmetic from \"./arithmetic\";\nimport branching from \"./branching\";\nimport checks from \"./checks\";\nimport data from \"./data\";\nimport logical from \"./logical\";\nimport misc from \"./misc\";\nimport _ from \"lodash\";\n\nexport default _.keyBy(\n\t[...arithmetic, ...branching, ...checks, ...data, ...logical, ...misc],\n\t\"id\"\n);\n","import CPU from \"./CPU\";\n\nexport default CPU;\n","import { WithContext } from \"../helpers\";\nimport { Register8Bit, Register16Bit } from \"../registers\";\nimport FlagsRegister from \"./FlagsRegister\";\nimport CPUMemoryMap from \"./CPUMemoryMap\";\nimport Stack from \"./Stack\";\nimport operations from \"./operations\";\nimport { interrupts } from \"./constants\";\n\nconst INITIAL_FLAGS = 0b00100100;\nconst INTERRUPT_CYCLES = 7;\n\n/** The Center Process Unit. It runs programs. */\nexport default class CPU {\n\tconstructor() {\n\t\tWithContext.apply(this);\n\n\t\tthis.pc = new Register16Bit(); //    -> program counter\n\t\tthis.sp = new Register8Bit(); //     -> stack pointer\n\t\tthis.flags = new FlagsRegister(); // -> also called \"P\" register\n\t\tthis.cycle = 0; //                   -> current cycle\n\t\tthis.extraCycles = 0; //             -> pending cycles (to add in next step)\n\n\t\tthis.registers = {\n\t\t\ta: new Register8Bit(0), // accumulator\n\t\t\tx: new Register8Bit(0), // index X\n\t\t\ty: new Register8Bit(0) // index Y\n\t\t};\n\n\t\tthis.memory = new CPUMemoryMap();\n\t\tthis.stack = new Stack();\n\n\t\tthis._parameter = null;\n\t}\n\n\t/** When a context is loaded. */\n\tonLoad(context) {\n\t\tthis.memory.loadContext(context);\n\t\tthis.stack.loadContext(context);\n\t\tthis._reset();\n\t}\n\n\t/** Executes the next operation. */\n\tstep() {\n\t\tthis.requireContext();\n\n\t\tconst pc = this.pc.value;\n\t\tconst operation = this._readOperation();\n\t\tconst parameter = this._readParameter(operation);\n\n\t\tif (this.context.logger)\n\t\t\tthis.context.logger.log({\n\t\t\t\tcontext: this.context,\n\t\t\t\tpc,\n\t\t\t\toperation,\n\t\t\t\tinitialParameter: this._parameter,\n\t\t\t\tfinalParameter: parameter\n\t\t\t});\n\n\t\toperation.instruction.execute(this.context, parameter);\n\t\tthis.cycle += operation.cycles + this.extraCycles;\n\t\tthis.extraCycles = 0;\n\t}\n\n\t/** Pushes the context to the stack and jumps to the interrupt handler. */\n\tinterrupt(interrupt, withB2Flag) {\n\t\tif (interrupt.id === \"IRQ\" && !this._areInterruptsEnabled) return;\n\n\t\tthis.stack.push2Bytes(this.pc.value);\n\t\tthis.pushFlags(withB2Flag);\n\n\t\tthis.cycle += INTERRUPT_CYCLES;\n\n\t\tthis.flags.i = true; // (to make sure handler doesn't get interrupted)\n\t\tthis._jumpToInterruptHandler(interrupt);\n\t}\n\n\t/**\n\t * Pushes the flags to the stack.\n\t * B1 (bit 5) is always on, while B2 (bit 4) depends on `withB2Flag`.\n\t */\n\tpushFlags(withB2Flag = false) {\n\t\tthis.stack.push(this.flags.toByte() | (withB2Flag && 0b00010000));\n\t}\n\n\t/** When the current context is unloaded. */\n\tonUnload() {\n\t\tthis._reset();\n\t\tthis.stack.unloadContext();\n\t\tthis.memory.unloadContext();\n\t}\n\n\t_reset() {\n\t\tthis.pc.reset();\n\t\tthis.sp.reset();\n\t\tthis.flags.load(INITIAL_FLAGS);\n\t\tthis.cycle = 0;\n\t\tthis.extraCycles = 0;\n\t\tthis.registers.a.reset();\n\t\tthis.registers.x.reset();\n\t\tthis.registers.y.reset();\n\t\tthis._parameter = null;\n\n\t\tthis.interrupt(interrupts.RESET);\n\t}\n\n\t_readOperation() {\n\t\tconst opcode = this.memory.readAt(this.pc.value);\n\t\tconst operation = operations[opcode];\n\t\tif (!operation) throw new Error(`Unknown opcode: 0x${opcode.toString(16)}`);\n\t\tthis.pc.increment();\n\n\t\treturn operation;\n\t}\n\n\t_readParameter({ instruction, addressing, canTakeExtraCycles }) {\n\t\tconst parameter = this.memory.readBytesAt(\n\t\t\tthis.pc.value,\n\t\t\taddressing.parameterSize\n\t\t);\n\t\tthis.pc.value += addressing.parameterSize;\n\t\tthis._parameter = parameter;\n\n\t\treturn instruction.needsValue\n\t\t\t? addressing.getValue(this.context, parameter, canTakeExtraCycles)\n\t\t\t: addressing.getAddress(this.context, parameter, canTakeExtraCycles);\n\t}\n\n\t_jumpToInterruptHandler(interrupt) {\n\t\tthis.pc.value = this.memory.read2BytesAt(interrupt.vector);\n\t}\n\n\tget _areInterruptsEnabled() {\n\t\treturn !this.flags.i;\n\t}\n}\n","import Mapper from \"./Mapper\";\nimport {\n\tWithComposedMemory,\n\tMemoryChunk,\n\tMemoryMirror,\n\tMemoryPadding\n} from \"../../memory\";\n\nconst KB = 1024;\nconst PRG_ROM_PAGE_SIZE = 16 * KB;\n\n/** The simplest mapper (also called \"mapper 0\"). */\nexport default class NROM extends Mapper {\n\tstatic get id() {\n\t\treturn 0;\n\t}\n\n\tconstructor(cartridge) {\n\t\tsuper(cartridge);\n\t\tWithComposedMemory.apply(this);\n\n\t\tconst unused = new MemoryPadding(0x3fe0);\n\t\tconst prgRomFirstPage = new MemoryChunk(\n\t\t\tcartridge.prgRom.slice(0, PRG_ROM_PAGE_SIZE)\n\t\t);\n\t\tconst prgRomLastPage =\n\t\t\tcartridge.header.prgRomPages === 2\n\t\t\t\t? new MemoryChunk(\n\t\t\t\t\t\tcartridge.prgRom.slice(PRG_ROM_PAGE_SIZE, PRG_ROM_PAGE_SIZE * 2)\n\t\t\t\t  )\n\t\t\t\t: new MemoryMirror(prgRomFirstPage, 0x4000);\n\n\t\tthis.defineChunks([\n\t\t\t//                   Address   Size      Description\n\t\t\tunused, //           $4020     $3FE0     Unused space\n\t\t\tprgRomFirstPage, //  $8000     $4000     PRG-ROM (first 16KB of ROM)\n\t\t\tprgRomLastPage //    $C000     $4000     PRG-ROM (last 16KB of ROM or mirror)\n\t\t]);\n\t}\n}\n","/** An abstract class that represents a generic mapper. */\nexport default class Mapper {\n\tstatic get id() {\n\t\tthrow new Error(\"not_implemented\");\n\t}\n}\n","import NROM from \"./NROM\";\nimport _ from \"lodash\";\n\nexport default _.keyBy([NROM], \"id\");\n","import { Byte } from \"../helpers\";\nimport mappers from \"./mappers\";\n\nconst MAGIC_NUMBER = \"NES\";\nconst KB = 1024;\nconst HEADER_SIZE = 16;\nconst TRAINER_SIZE = 512;\nconst PRG_ROM_PAGE_SIZE = 16 * KB;\nconst CHR_ROM_PAGE_SIZE = 8 * KB;\n\n/** The game cartridge (a file in iNES format). */\nexport default class Cartridge {\n\tconstructor(bytes) {\n\t\tthis.bytes = bytes;\n\n\t\tif (this.magicNumber !== MAGIC_NUMBER)\n\t\t\tthrow new Error(\"Invalid ROM format.\");\n\t}\n\n\t/** Returns a new instance of the right mapper. */\n\tcreateMapper() {\n\t\treturn new mappers[this.header.mapperId](this);\n\t}\n\n\t/** Returns the PRG ROM, which contains the game's code. */\n\tget prgRom() {\n\t\treturn this._getBytes(this._programOffset, this._programSize);\n\t}\n\n\t/** Returns the CHR ROM, which contains static tilesets, or null. */\n\tget chrRom() {\n\t\tconst offset = this._programOffset + this._programSize;\n\t\tconst size = this.header.chrRomPages * CHR_ROM_PAGE_SIZE;\n\n\t\treturn size > 0 ? this._getBytes(offset, size) : null;\n\t}\n\n\t/** Returns the header data. */\n\tget header() {\n\t\tif (this.__header) return this.__header;\n\n\t\tconst flags6 = this.bytes.readUInt8(6);\n\t\tconst flags7 = this.bytes.readUInt8(7);\n\n\t\treturn (this.__header = {\n\t\t\tprgRomPages: this.bytes.readUInt8(4),\n\t\t\tchrRomPages: this.bytes.readUInt8(5),\n\t\t\thasTrainerBeforeProgram: !!Byte.getBit(flags6, 2),\n\t\t\tmapperId: Byte.setSubNumber(\n\t\t\t\tByte.getSubNumber(flags6, 4, 4),\n\t\t\t\t4,\n\t\t\t\t4,\n\t\t\t\tByte.getSubNumber(flags7, 4, 4)\n\t\t\t)\n\t\t});\n\t}\n\n\t/** Returns the first 3 ASCII bytes of the header. It should return \"NES\". */\n\tget magicNumber() {\n\t\treturn Array.from(this._getBytes(0, 3))\n\t\t\t.map((char) => String.fromCharCode(char))\n\t\t\t.join(\"\");\n\t}\n\n\t_getBytes(offset, size) {\n\t\treturn this.bytes.slice(offset, offset + size);\n\t}\n\n\tget _programOffset() {\n\t\treturn (\n\t\t\tHEADER_SIZE + (this.header.hasTrainerBeforeProgram ? TRAINER_SIZE : 0)\n\t\t);\n\t}\n\n\tget _programSize() {\n\t\treturn this.header.prgRomPages * PRG_ROM_PAGE_SIZE;\n\t}\n}\n","import Cartridge from \"./Cartridge\";\n\nexport default Cartridge;\n","import CPU from \"./cpu\";\nimport Cartridge from \"./cartridge\";\nimport { WithContext } from \"./helpers\";\n\n/** The NES Emulator. */\nexport default class NES {\n\tconstructor(logger = null) {\n\t\tWithContext.apply(this);\n\n\t\tthis.logger = logger;\n\n\t\tthis.cpu = new CPU();\n\t}\n\n\t/** Loads a `rom` as the current cartridge. */\n\tload(rom, logger = null) {\n\t\tconst cartridge = new Cartridge(rom);\n\n\t\tthis.loadContext({\n\t\t\tlogger: this.logger,\n\n\t\t\tcpu: this.cpu,\n\t\t\tmemory: this.cpu.memory,\n\n\t\t\tcartridge,\n\t\t\tmapper: cartridge.createMapper()\n\t\t});\n\t}\n\n\t/** Executes a step in the emulation. */\n\tstep() {\n\t\tthis.cpu.step();\n\t}\n\n\t/** Unloads the current cartridge. */\n\tunload() {\n\t\tthis.unloadContext();\n\t}\n\n\t/** When a context is loaded. */\n\tonLoad(context) {\n\t\tthis.cpu.loadContext(this.context);\n\t\tthis._reset();\n\t}\n\n\t/** When the current context is unloaded. */\n\tonUnload() {\n\t\tthis._reset();\n\t}\n\n\t_reset() {}\n}\n","import { getIndirectAddress } from \"./cpu/addressings/indirect\";\nimport { Byte } from \"./helpers\";\nimport _ from \"lodash\";\n\nconst hex = (value, length) =>\n\t_.padStart(value.toString(16).toUpperCase(), length, \"0\");\n\nexport default {\n\tlog: (request) => {\n\t\tconst {\n\t\t\tcontext,\n\t\t\tpc,\n\t\t\toperation,\n\t\t\tinitialParameter,\n\t\t\tfinalParameter\n\t\t} = request;\n\n\t\tconst { cpu, memory } = context;\n\n\t\tconst cycle = (value, length) => _.padStart(value.toString(), length);\n\t\tconst section = (string, length) =>\n\t\t\t_.padEnd(string.substr(0, length), length);\n\t\tconst hexParameter = (value) => {\n\t\t\tif (operation.addressing.parameterSize === 0) return \"\";\n\n\t\t\treturn operation.addressing.parameterSize === 2\n\t\t\t\t? hex(value, 4)\n\t\t\t\t: hex(value, 2);\n\t\t};\n\t\tconst formatParameter = () => {\n\t\t\tconst instructionsWithValue = [\n\t\t\t\t\"STA\",\n\t\t\t\t\"STX\",\n\t\t\t\t\"STY\",\n\t\t\t\t\"LDA\",\n\t\t\t\t\"LDX\",\n\t\t\t\t\"LDY\",\n\t\t\t\t\"BIT\",\n\t\t\t\t\"ORA\",\n\t\t\t\t\"AND\",\n\t\t\t\t\"EOR\",\n\t\t\t\t\"ADC\",\n\t\t\t\t\"SBC\",\n\t\t\t\t\"CMP\",\n\t\t\t\t\"CPX\",\n\t\t\t\t\"CPY\",\n\t\t\t\t\"LSR\",\n\t\t\t\t\"ASL\",\n\t\t\t\t\"ROR\",\n\t\t\t\t\"ROL\",\n\t\t\t\t\"INC\",\n\t\t\t\t\"DEC\"\n\t\t\t];\n\n\t\t\tconst $initialParameter = hexParameter(initialParameter, 2);\n\t\t\tconst $finalParameter = hexParameter(finalParameter, 2);\n\t\t\tlet finalAddress = null;\n\n\t\t\ttry {\n\t\t\t\tfinalAddress = operation.addressing.getAddress(\n\t\t\t\t\tcontext,\n\t\t\t\t\tinitialParameter\n\t\t\t\t);\n\t\t\t} catch (e) {}\n\n\t\t\tswitch (operation.addressing.id) {\n\t\t\t\tcase \"IMPLICIT\":\n\t\t\t\t\treturn \"\";\n\t\t\t\tcase \"IMMEDIATE\":\n\t\t\t\t\treturn `#$${$finalParameter}`;\n\t\t\t\tcase \"ABSOLUTE\":\n\t\t\t\t\tlet $address = `$${$initialParameter}`;\n\t\t\t\t\tif (_.includes(instructionsWithValue, operation.instruction.id))\n\t\t\t\t\t\t$address += ` = ${hex(memory.readAt(finalAddress), 2)}`;\n\t\t\t\t\treturn $address;\n\t\t\t\tcase \"ZERO_PAGE\":\n\t\t\t\t\treturn `$${$initialParameter} = ${hex(\n\t\t\t\t\t\tmemory.readAt(finalAddress),\n\t\t\t\t\t\t2\n\t\t\t\t\t)}`;\n\t\t\t\tcase \"INDEXED_ABSOLUTE_X\":\n\t\t\t\tcase \"INDEXED_ZERO_PAGE_X\":\n\t\t\t\t\treturn `$${$initialParameter},X @ ${hexParameter(\n\t\t\t\t\t\tfinalAddress\n\t\t\t\t\t)} = ${hex(memory.readAt(finalAddress), 2)}`;\n\t\t\t\tcase \"INDEXED_ABSOLUTE_Y\":\n\t\t\t\tcase \"INDEXED_ZERO_PAGE_Y\":\n\t\t\t\t\treturn `$${$initialParameter},Y @ ${hexParameter(\n\t\t\t\t\t\tfinalAddress\n\t\t\t\t\t)} = ${hex(memory.readAt(finalAddress), 2)}`;\n\t\t\t\tcase \"INDIRECT\":\n\t\t\t\t\treturn `($${$initialParameter}) = ${hex(finalAddress, 4)}`;\n\t\t\t\tcase \"INDEXED_INDIRECT_X\":\n\t\t\t\t\treturn `($${$initialParameter},X) @ ${hex(\n\t\t\t\t\t\tByte.force8Bit(initialParameter + cpu.registers.x.value),\n\t\t\t\t\t\t2\n\t\t\t\t\t)} = ${hex(finalAddress, 4)} = ${hex(\n\t\t\t\t\t\tmemory.readAt(finalAddress),\n\t\t\t\t\t\t2\n\t\t\t\t\t)}`;\n\t\t\t\tcase \"INDEXED_INDIRECT_Y\":\n\t\t\t\t\treturn `($${$initialParameter}),Y = ${hex(\n\t\t\t\t\t\tgetIndirectAddress(context, initialParameter, Byte.force8Bit),\n\t\t\t\t\t\t4\n\t\t\t\t\t)} @ ${hex(finalAddress, 4)} = ${hex(\n\t\t\t\t\t\tmemory.readAt(finalAddress),\n\t\t\t\t\t\t2\n\t\t\t\t\t)}`;\n\t\t\t\tcase \"ACCUMULATOR\":\n\t\t\t\t\treturn \"A\";\n\t\t\t\tdefault:\n\t\t\t\t\treturn `$${$finalParameter}`;\n\t\t\t}\n\t\t};\n\n\t\tconst $counter = section(hex(pc, 4), 6);\n\n\t\tconst $operation = hex(operation.id, 2);\n\t\tlet $parameters = \" \";\n\t\tif (operation.addressing.parameterSize > 0) {\n\t\t\t$parameters +=\n\t\t\t\toperation.addressing.parameterSize === 2\n\t\t\t\t\t? hex(Byte.lowPartOf(initialParameter), 2) +\n\t\t\t\t\t  \" \" +\n\t\t\t\t\t  hex(Byte.highPartOf(initialParameter), 2)\n\t\t\t\t\t: hex(initialParameter, 2);\n\t\t}\n\t\tconst $commandHex = section($operation + $parameters, 10);\n\n\t\tconst $assembly = section(\n\t\t\toperation.instruction.id + \" \" + formatParameter(),\n\t\t\t32\n\t\t);\n\n\t\tconst $registers =\n\t\t\t[\"a\", \"x\", \"y\"]\n\t\t\t\t.map((register) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\tregister.toUpperCase() + \":\" + hex(cpu.registers[register].value, 2)\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t\t.join(\" \") +\n\t\t\t\" P:\" +\n\t\t\thex(cpu.flags.toByte(), 2) +\n\t\t\t\" SP:\" +\n\t\t\thex(cpu.sp.value, 2);\n\n\t\tconst $ppuCycle = \"PPU:\" + cycle(0, 3) + \",\" + cycle(1, 3);\n\t\tconst $cpuCycle = \"CYC:\" + cpu.cycle;\n\t\tconst $status = `${$registers} ${$ppuCycle} ${$cpuCycle}`;\n\n\t\twindow.lastLog = $counter + $commandHex + $assembly + $status;\n\t\tconsole.log(window.lastLog);\n\t}\n};\n","import React, { Component } from \"react\";\nimport DiffViewer from \"react-diff-viewer\";\nimport _ from \"lodash\";\nimport \"./App.css\";\n\nexport default class App extends Component {\n\tcomponentWillMount() {\n\t\tdocument.addEventListener(\"keydown\", this.onStep);\n\t}\n\n\tcomponentWillUnmount() {\n\t\tdocument.removeEventListener(\"keydown\", this.onStep);\n\t}\n\n\tstate = { expected: \"\", actual: \"\" };\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"app\">\n\t\t\t\t<div>\n\t\t\t\t\t<div className=\"debugger\" onKeyDown={this.onStep}>\n\t\t\t\t\t\t<DiffViewer\n\t\t\t\t\t\t\toldValue={this.state.expected}\n\t\t\t\t\t\t\tnewValue={this.state.actual}\n\t\t\t\t\t\t\tsplitView={true}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"titles\">\n\t\t\t\t\t\t<h1 className=\"title\">NesTest</h1>\n\t\t\t\t\t\t<h1 className=\"title\">NesCore</h1>\n\t\t\t\t\t</div>\n\t\t\t\t\t<i className=\"hint\">Enter => Next page</i>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tonStep = (event) => {\n\t\tif (event.code !== \"Enter\") return;\n\n\t\tlet diffs = [];\n\t\tfor (let i = 0; i < 10; i++) diffs.push(window.getDiff());\n\n\t\tthis.setState({\n\t\t\texpected: _(diffs)\n\t\t\t\t.map(\"expected\")\n\t\t\t\t.join(\"\\n\"),\n\t\t\tactual: _(diffs)\n\t\t\t\t.map(\"actual\")\n\t\t\t\t.join(\"\\n\")\n\t\t});\n\t};\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","import NES from \"./nes/NES\";\nimport NESTestLogger from \"./nes/NESTestLogger\";\nimport { Buffer } from \"buffer\";\nimport \"./gui\";\n\nconst DEMO = async () => {\n\tconst response = await fetch(\"testroms/nestest.nes\");\n\tconst arrayBuffer = await response.arrayBuffer();\n\tconst bytes = Buffer.from(arrayBuffer);\n\n\twindow.bytes = bytes;\n\twindow.nes = new NES(NESTestLogger);\n\n\twindow.nes.load(bytes);\n\twindow.nes.cpu.pc.value = 0xc000;\n\n\tconst logResponse = await fetch(\"testroms/nestest.log\");\n\tconst logText = await logResponse.text();\n\tconst logLines = logText.split(/\\n|\\r\\n|\\r/);\n\n\tconst withoutPpu = (line) =>\n\t\tline && line.replace(/PPU: *\\d+, *\\d+ CYC:/, \"CYC:\");\n\tlet line = 0;\n\twindow.getDiff = () => {\n\t\twindow.nes.step();\n\t\tconst diff = {\n\t\t\tactual: withoutPpu(window.lastLog),\n\t\t\texpected: withoutPpu(logLines[line])\n\t\t};\n\t\tline++;\n\t\treturn diff;\n\t};\n};\n\nDEMO();\n"],"sourceRoot":""}